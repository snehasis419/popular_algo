<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:fb="http://www.facebook.com/2008/fbml" xml:lang="en" lang="en-US"><head> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> <script src="winsock-multi-client-servers_files/hubclient.js" async="" type="text/javascript" id="LR1"></script><script src="winsock-multi-client-servers_files/beacon.js" async=""></script><script type="text/javascript" async="" src="winsock-multi-client-servers_files/quant.js"></script><script src="winsock-multi-client-servers_files/widgets.js" id="twitter-wjs"></script><script async="" src="winsock-multi-client-servers_files/cbgapi.loaded_0"></script><script gapi_processed="true" src="winsock-multi-client-servers_files/plusone.js" async="" type="text/javascript"></script><script src="winsock-multi-client-servers_files/ga.js" async="" type="text/javascript"></script><script type="text/javascript" src="winsock-multi-client-servers_files/jquery.js"></script> <script type="text/javascript">var csrf_hash = 'd47dcad9cb76fc44f91b242350259f8c';</script> <script type="text/javascript"> <!--
			var adsense_channel = '+2728197858';
		//--> </script> <meta property="og:site_name" content="DaniWeb"> <meta property="og:image" content="http://static.daniweb.com/images/icon.png"> <link rel="image_src" type="image/png" href="http://static.daniweb.com/images/icon.png"> <meta property="fb:admins" content="509930074"> <link rel="stylesheet" type="text/css" href="winsock-multi-client-servers_files/nogroup71.css"> <script type="text/javascript" src="winsock-multi-client-servers_files/nogroup64.js"></script> <script type="text/javascript">
	
	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-98289-1']);
	  _gaq.push(['_trackPageview']);
	  _gaq.push(['_trackPageLoadTime']);
	
	  (function() {
	    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	  })();
	
	</script> <link rel="home" href="http://www.daniweb.com/"> <link rel="search" href="http://www.daniweb.com/search/query"> <title>Winsock Multi-Client Servers | DaniWeb</title> <link rel="canonical" href="http://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers"> <link rel="up" href="http://www.daniweb.com/software-development/cpp/8"> <link rel="author" href="http://www.daniweb.com/members/7485/FireNet"> <meta name="keywords" content="C++,FireNet"> <meta name="description" content="Creating Servers for handling Multiple clients Fog Edition By FireNet (This document is dedicated to my friend Aaron Anderson) (Fog Edition means I dont tell you everything stright.All the info will be there but you will have to do much thinking) Servers and Clients,the backbone of the internet after the ... - Article in the C++ forum contributed by FireNet"> <meta property="og:title" content="Winsock Multi-Client Servers"> <meta property="og:description" content="Creating Servers for handling Multiple clients Fog Edition By FireNet (This document is dedicated to my friend Aaron Anderson) (Fog Edition means I dont tell you everything stright.All the info will be there but you will have to do much thinking) Servers and Clients,the backbone of the internet after the ..."> <meta property="og:type" content="article"> <meta property="og:url" content="http://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers"> <link rel="alternate" type="application/rss+xml" title="C++" href="http://www.daniweb.com/rss/pull/8"> <script src="winsock-multi-client-servers_files/nonSecureAnonymousFramework"></script><script src="winsock-multi-client-servers_files/osd.js" type="text/javascript"></script><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}
.fb_invisible{display:none}
.fb_reset{background:none;border-spacing:0;border:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}
.fb_link img{border:none}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}
.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px}
.fb_dialog_content{background:#fff;color:#333}
.fb_dialog_close_icon{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yA/x/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/y6/x/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px;top:8px\9;right:7px\9}
.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}
.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}
.fb_dialog_close_icon:hover{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yA/x/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/y6/x/s816eWC-2sl.gif)}
.fb_dialog_close_icon:active{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yA/x/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/y6/x/s816eWC-2sl.gif)}
.fb_dialog_loader{background-color:#f2f2f2;border:1px solid #606060;font-size:24px;padding:20px}
.fb_dialog_top_left,
.fb_dialog_top_right,
.fb_dialog_bottom_left,
.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}
.fb_dialog_top_left{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yR/x/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}
.fb_dialog_top_right{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yR/x/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}
.fb_dialog_bottom_left{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yR/x/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}
.fb_dialog_bottom_right{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yR/x/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}
.fb_dialog_vert_left,
.fb_dialog_vert_right,
.fb_dialog_horiz_top,
.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}
.fb_dialog_vert_left,
.fb_dialog_vert_right{width:10px;height:100%}
.fb_dialog_vert_left{margin-left:-10px}
.fb_dialog_vert_right{right:0;margin-right:-10px}
.fb_dialog_horiz_top,
.fb_dialog_horiz_bottom{width:100%;height:10px}
.fb_dialog_horiz_top{margin-top:-10px}
.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}
.fb_dialog_iframe{line-height:0}
.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #3b5998;color:#fff;font-size:14px;font-weight:bold;margin:0}
.fb_dialog_content .dialog_title > span{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yD/x/Cou7n-nqK52.gif)
no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}
body.fb_hidden{-webkit-transform:none;height:100%;margin:0;left:-10000px;overflow:visible;position:absolute;top:-10000px;width:100%
}
.fb_dialog.fb_dialog_mobile.loading{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yc/x/3rhSv5V8j3o.gif)
white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}
.fb_dialog.fb_dialog_mobile.loading.centered{max-height:590px;min-height:590px;max-width:500px;min-width:500px}
#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;left:0;top:0;width:100%;min-height:100%;z-index:10000}
#fb-root #fb_dialog_ipad_overlay.hidden{display:none}
.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}
.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0 0, 0 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}
.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%
}
.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px
}
.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px
}
.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0 0, 0 100%, from(#4966A6),
color-stop(0.5, #355492), to(#2A4887));border:1px solid #29447e;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset,
rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}
.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}
.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}
.fb_dialog_content .dialog_content{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yJ/x/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}
.fb_dialog_content .dialog_footer{background:#f2f2f2;border:1px solid #555;border-top-color:#ccc;height:40px}
#fb_dialog_loader_close{float:left}
.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}
.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}
.fb_iframe_widget{position:relative;display:-moz-inline-block;display:inline-block}
.fb_iframe_widget iframe{position:absolute}
.fb_iframe_widget_lift{z-index:1}
.fb_iframe_widget span{position:relative;display:inline-block;vertical-align:text-bottom;text-align:justify}
.fb_hide_iframes iframe{position:relative;left:-10000px}
.fb_iframe_widget_loader{position:relative;display:inline-block}
.fb_iframe_widget_fluid{display:inline}
.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}
.fb_iframe_widget_loader .FB_Loader{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yJ/x/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}
.fb_button_simple,
.fb_button_simple_rtl{background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/yH/x/eIpbnVKI9lR.png);background-repeat:no-repeat;cursor:pointer;outline:none;text-decoration:none}
.fb_button_simple_rtl{background-position:right 0}
.fb_button_simple .fb_button_text{margin:0 0 0 20px;padding-bottom:1px}
.fb_button_simple_rtl .fb_button_text{margin:0 10px 0 0}
a.fb_button_simple:hover .fb_button_text,
a.fb_button_simple_rtl:hover .fb_button_text,
.fb_button_simple:hover .fb_button_text,
.fb_button_simple_rtl:hover .fb_button_text{text-decoration:underline}
.fb_button,
.fb_button_rtl{background:#29447e url(http://static.ak.fbcdn.net/rsrc.php/v2/yl/x/FGFbc80dUKj.png);background-repeat:no-repeat;cursor:pointer;display:inline-block;padding:0 0 0 1px;text-decoration:none;outline:none}
.fb_button .fb_button_text,
.fb_button_rtl .fb_button_text{background:#5f78ab url(http://static.ak.fbcdn.net/rsrc.php/v2/yl/x/FGFbc80dUKj.png);border-top:solid 1px #879ac0;border-bottom:solid 1px #1a356e;color:#fff;display:block;font-family:"lucida grande",tahoma,verdana,arial,sans-serif;font-weight:bold;padding:2px 6px 3px 6px;margin:1px 1px 0 21px;text-shadow:none}
a.fb_button,
a.fb_button_rtl,
.fb_button,
.fb_button_rtl{text-decoration:none}
a.fb_button:active .fb_button_text,
a.fb_button_rtl:active .fb_button_text,
.fb_button:active .fb_button_text,
.fb_button_rtl:active .fb_button_text{border-bottom:solid 1px #29447e;border-top:solid 1px #45619d;background:#4f6aa3;text-shadow:none}
.fb_button_xlarge,
.fb_button_xlarge_rtl{background-position:left -60px;font-size:24px;line-height:30px}
.fb_button_xlarge .fb_button_text{padding:3px 8px 3px 12px;margin-left:38px}
a.fb_button_xlarge:active{background-position:left -99px}
.fb_button_xlarge_rtl{background-position:right -268px}
.fb_button_xlarge_rtl .fb_button_text{padding:3px 8px 3px 12px;margin-right:39px}
a.fb_button_xlarge_rtl:active{background-position:right -307px}
.fb_button_large,
.fb_button_large_rtl{background-position:left -138px;font-size:13px;line-height:16px}
.fb_button_large .fb_button_text{margin-left:24px;padding:2px 6px 4px 6px}
a.fb_button_large:active{background-position:left -163px}
.fb_button_large_rtl{background-position:right -346px}
.fb_button_large_rtl .fb_button_text{margin-right:25px}
a.fb_button_large_rtl:active{background-position:right -371px}
.fb_button_medium,
.fb_button_medium_rtl{background-position:left -188px;font-size:11px;line-height:14px}
a.fb_button_medium:active{background-position:left -210px}
.fb_button_medium_rtl{background-position:right -396px}
.fb_button_text_rtl,
.fb_button_medium_rtl .fb_button_text{padding:2px 6px 3px 6px;margin-right:22px}
a.fb_button_medium_rtl:active{background-position:right -418px}
.fb_button_small,
.fb_button_small_rtl{background-position:left -232px;font-size:10px;line-height:10px}
.fb_button_small .fb_button_text{padding:2px 6px 3px;margin-left:17px}
a.fb_button_small:active,
.fb_button_small:active{background-position:left -250px}
.fb_button_small_rtl{background-position:right -440px}
.fb_button_small_rtl .fb_button_text{padding:2px 6px;margin-right:18px}
a.fb_button_small_rtl:active{background-position:right -458px}
.fb_share_count_wrapper{position:relative;float:left}
.fb_share_count{background:#b0b9ec none repeat scroll 0 0;color:#333;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;text-align:center}
.fb_share_count_inner{background:#e8ebf2;display:block}
.fb_share_count_right{margin-left:-1px;display:inline-block}
.fb_share_count_right .fb_share_count_inner{border-top:solid 1px #e8ebf2;border-bottom:solid 1px #b0b9ec;margin:1px 1px 0 1px;font-size:10px;line-height:10px;padding:2px 6px 3px;font-weight:bold}
.fb_share_count_top{display:block;letter-spacing:-1px;line-height:34px;margin-bottom:7px;font-size:22px;border:solid 1px #b0b9ec}
.fb_share_count_nub_top{border:none;display:block;position:absolute;left:7px;top:35px;margin:0;padding:0;width:6px;height:7px;background-repeat:no-repeat;background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/yP/x/bSOHtKbCGYI.png)}
.fb_share_count_nub_right{border:none;display:inline-block;padding:0;width:5px;height:10px;background-repeat:no-repeat;background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/yL/x/i_oIVTKMYsL.png);vertical-align:top;background-position:right 5px;z-index:10;left:2px;margin:0 2px 0 0;position:relative}
.fb_share_no_count{display:none}
.fb_share_size_Small .fb_share_count_right .fb_share_count_inner{font-size:10px}
.fb_share_size_Medium .fb_share_count_right .fb_share_count_inner{font-size:11px;padding:2px 6px 3px;letter-spacing:-1px;line-height:14px}
.fb_share_size_Large .fb_share_count_right .fb_share_count_inner{font-size:13px;line-height:16px;padding:2px 6px 4px;font-weight:normal;letter-spacing:-1px}
.fb_share_count_hidden .fb_share_count_nub_top,
.fb_share_count_hidden .fb_share_count_top,
.fb_share_count_hidden .fb_share_count_nub_right,
.fb_share_count_hidden .fb_share_count_right{visibility:hidden}
.fb_connect_bar_container div,
.fb_connect_bar_container span,
.fb_connect_bar_container a,
.fb_connect_bar_container img,
.fb_connect_bar_container strong{background:none;border-spacing:0;border:0;direction:ltr;font-style:normal;font-variant:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal;vertical-align:baseline}
.fb_connect_bar_container{position:fixed;left:0 !important;right:0 !important;height:42px !important;padding:0 25px !important;margin:0 !important;vertical-align:middle !important;border-bottom:1px solid #333 !important;background:#3b5998 !important;z-index:99999999 !important;overflow:hidden !important}
.fb_connect_bar_container_ie6{position:absolute;top:expression(document.compatMode=="CSS1Compat"? document.documentElement.scrollTop+"px":body.scrollTop+"px")}
.fb_connect_bar{position:relative;margin:auto;height:100%;width:100%;padding:6px 0 0 0 !important;background:none;color:#fff !important;font-family:"lucida grande", tahoma, verdana, arial, sans-serif !important;font-size:13px !important;font-style:normal !important;font-variant:normal !important;font-weight:normal !important;letter-spacing:normal !important;line-height:1 !important;text-decoration:none !important;text-indent:0 !important;text-shadow:none !important;text-transform:none !important;white-space:normal !important;word-spacing:normal !important}
.fb_connect_bar a:hover{color:#fff}
.fb_connect_bar .fb_profile img{height:30px;width:30px;vertical-align:middle;margin:0 6px 5px 0}
.fb_connect_bar div a,
.fb_connect_bar span,
.fb_connect_bar span a{color:#bac6da;font-size:11px;text-decoration:none}
.fb_connect_bar .fb_buttons{float:right;margin-top:7px}
.fb_edge_widget_with_comment{position:relative;*z-index:1000}
.fb_edge_widget_with_comment span.fb_edge_comment_widget{position:absolute}
.fb_edge_widget_with_comment span.fb_send_button_form_widget{z-index:1}
.fb_edge_widget_with_comment span.fb_send_button_form_widget .FB_Loader{left:0;top:1px;margin-top:6px;margin-left:0;background-position:50% 50%;background-color:#fff;height:150px;width:394px;border:1px #666 solid;border-bottom:2px solid #283e6c;z-index:1}
.fb_edge_widget_with_comment span.fb_send_button_form_widget.dark .FB_Loader{background-color:#000;border-bottom:2px solid #ccc}
.fb_edge_widget_with_comment span.fb_send_button_form_widget.siderender
.FB_Loader{margin-top:0}
.fbpluginrecommendationsbarleft,
.fbpluginrecommendationsbarright{position:fixed !important;bottom:0;z-index:999}
/* @noflip */
.fbpluginrecommendationsbarleft{left:10px}
/* @noflip */
.fbpluginrecommendationsbarright{right:10px}
</style><style type="text/css">* html #li_ui_li_gen_1346941792325_0 a#li_ui_li_gen_1346941792325_0-link{height:1% !important;}#li_ui_li_gen_1346941792325_0{position:relative !important;overflow:visible !important;display:block !important;}#li_ui_li_gen_1346941792325_0 a#li_ui_li_gen_1346941792325_0-link{border:0 !important;height:20px !important;text-decoration:none !important;padding:0 !important;margin:0 !important;display:inline-block !important;}#li_ui_li_gen_1346941792325_0 a#li_ui_li_gen_1346941792325_0-link:link, #li_ui_li_gen_1346941792325_0 a#li_ui_li_gen_1346941792325_0-link:visited, #li_ui_li_gen_1346941792325_0 a#li_ui_li_gen_1346941792325_0-link:hover, #li_ui_li_gen_1346941792325_0 a#li_ui_li_gen_1346941792325_0-link:active{border:0 !important;text-decoration:none !important;}#li_ui_li_gen_1346941792325_0 a#li_ui_li_gen_1346941792325_0-link:after{content:"." !important;display:block !important;clear:both !important;visibility:hidden !important;line-height:0 !important;height:0 !important;}#li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-logo{background:url(http://static02.linkedin.com/scds/common/u/img/sprite/sprite_connect_v13.png) 0px -276px no-repeat !important;cursor:pointer !important;border:0 !important;text-indent:-9999em !important;overflow:hidden !important;padding:0 !important;margin:0 !important;position:absolute !important;left:0px !important;top:0px !important;display:block !important;width:20px !important;height:20px !important;float:right !important;}#li_ui_li_gen_1346941792325_0.hovered #li_ui_li_gen_1346941792325_0-logo{background-position:-20px -276px !important;}#li_ui_li_gen_1346941792325_0.clicked #li_ui_li_gen_1346941792325_0-logo, #li_ui_li_gen_1346941792325_0.down #li_ui_li_gen_1346941792325_0-logo{background-position:-40px -276px !important;}.IN-shadowed #li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-logo{}#li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title{color:#333 !important;cursor:pointer !important;display:block !important;white-space:nowrap !important;float:left !important;margin-left:1px !important;vertical-align:top !important;overflow:hidden !important;text-align:center !important;height:18px !important;padding:0 4px 0 23px !important;border:1px solid #000 !important;border-top-color:#E2E2E2 !important;border-right-color:#BFBFBF !important;border-bottom-color:#B9B9B9 !important;border-left-color:#E2E2E2 !important;border-left:0 !important;text-shadow:#FFFFFF -1px 1px 0 !important;line-height:20px !important;border-radius:0 !important;-moz-border-radius:0 !important;border-top-right-radius:2px !important;border-bottom-right-radius:2px !important;-moz-border-radius-topright:2px !important;-moz-border-radius-bottomright:2px !important;background-color:#ECECEC !important;background-image:-moz-linear-gradient(top, #FEFEFE 0%, #ECECEC 100%) !important;}#li_ui_li_gen_1346941792325_0.hovered #li_ui_li_gen_1346941792325_0-title{border:1px solid #000 !important;border-top-color:#ABABAB !important;border-right-color:#9A9A9A !important;border-bottom-color:#787878 !important;border-left-color:#04568B !important;border-left:0 !important;background-color:#EDEDED !important;background-image:-moz-linear-gradient(top, #EDEDED 0%, #DEDEDE 100%) !important;}#li_ui_li_gen_1346941792325_0.clicked #li_ui_li_gen_1346941792325_0-title, #li_ui_li_gen_1346941792325_0.down #li_ui_li_gen_1346941792325_0-title{color:#666 !important;border:1px solid #000 !important;border-top-color:#B6B6B6 !important;border-right-color:#B3B3B3 !important;border-bottom-color:#9D9D9D !important;border-left-color:#49627B !important;border-left:0 !important;background-color:#DEDEDE !important;background-image:-moz-linear-gradient(top, #E3E3E3 0%, #EDEDED 100%) !important;}.IN-shadowed #li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title{}.IN-shadowed #li_ui_li_gen_1346941792325_0.hovered #li_ui_li_gen_1346941792325_0-title{}.IN-shadowed #li_ui_li_gen_1346941792325_0.clicked #li_ui_li_gen_1346941792325_0-title, .IN-shadowed #li_ui_li_gen_1346941792325_0.down #li_ui_li_gen_1346941792325_0-title{}#li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title-text, #li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title-text *{color:#333 !important;font-size:11px !important;font-family:Arial, sans-serif !important;font-weight:bold !important;font-style:normal !important;display:inline-block !important;background:transparent none !important;vertical-align:baseline !important;height:18px !important;line-height:20px !important;float:none !important;}#li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title-text strong{font-weight:bold !important;}#li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title-text em{font-style:italic !important;}#li_ui_li_gen_1346941792325_0.hovered #li_ui_li_gen_1346941792325_0-title-text, #li_ui_li_gen_1346941792325_0.hovered #li_ui_li_gen_1346941792325_0-title-text *{color:#000 !important;}#li_ui_li_gen_1346941792325_0.clicked #li_ui_li_gen_1346941792325_0-title-text, #li_ui_li_gen_1346941792325_0.down #li_ui_li_gen_1346941792325_0-title-text, #li_ui_li_gen_1346941792325_0.clicked #li_ui_li_gen_1346941792325_0-title-text *, #li_ui_li_gen_1346941792325_0.down #li_ui_li_gen_1346941792325_0-title-text *{color:#666 !important;}#li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title #li_ui_li_gen_1346941792325_0-mark{display:inline-block !important;width:0px !important;overflow:hidden !important;}.success #li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title{color:#333 !important;border-top-color:#E2E2E2 !important;border-right-color:#BFBFBF !important;border-bottom-color:#B9B9B9 !important;border-left-color:#E2E2E2 !important;background-color:#ECECEC !important;background-image:-moz-linear-gradient(top, #FEFEFE 0%, #ECECEC 100%) !important;}.success #li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title-text, .success #li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title-text *{color:#333 !important;}.IN-shadowed .success #li_ui_li_gen_1346941792325_0 #li_ui_li_gen_1346941792325_0-title{}.success #li_ui_li_gen_1346941792325_0.hovered #li_ui_li_gen_1346941792325_0-title{color:#000 !important;border-top-color:#ABABAB !important;border-right-color:#9A9A9A !important;border-bottom-color:#787878 !important;border-left-color:#04568B !important;background-color:#EDEDED !important;background-image:-moz-linear-gradient(top, #EDEDED 0%, #DEDEDE 100%) !important;}.success #li_ui_li_gen_1346941792325_0.hovered #li_ui_li_gen_1346941792325_0-title-text, .success #li_ui_li_gen_1346941792325_0.hovered #li_ui_li_gen_1346941792325_0-title-text *{color:#000 !important;}.success #li_ui_li_gen_1346941792325_0.clicked #li_ui_li_gen_1346941792325_0-title, .success #li_ui_li_gen_1346941792325_0.down #li_ui_li_gen_1346941792325_0-title{color:#666 !important;border-top-color:#B6B6B6 !important;border-right-color:#B3B3B3 !important;border-bottom-color:#9D9D9D !important;border-left-color:#49627B !important;background-color:#DEDEDE !important;background-image:-moz-linear-gradient(top, #E3E3E3 0%, #EDEDED 100%) !important;}.success #li_ui_li_gen_1346941792325_0.clicked #li_ui_li_gen_1346941792325_0-title-text, .success #li_ui_li_gen_1346941792325_0.down #li_ui_li_gen_1346941792325_0-title-text, .success #li_ui_li_gen_1346941792325_0.clicked #li_ui_li_gen_1346941792325_0-title-text *, .success #li_ui_li_gen_1346941792325_0.down #li_ui_li_gen_1346941792325_0-title-text *{color:#666 !important;}.IN-shadowed .success #li_ui_li_gen_1346941792325_0.clicked #li_ui_li_gen_1346941792325_0-title, .IN-shadowed .success #li_ui_li_gen_1346941792325_0.down #li_ui_li_gen_1346941792325_0-title{}#li_ui_li_gen_1346941792342_1-container.IN-top {display:inline-block !important;overflow:visible !important;position:relative !important;height:42px !important;line-height:1px !important;cursor:pointer !important;}#li_ui_li_gen_1346941792342_1.IN-top {display:inline-block !important;height:42px !important;width:57px !important;text-align:center !important;background:url(http://static02.linkedin.com/scds/common/u/img/sprite/sprite_connect_v13.png) -150px top no-repeat !important;}#li_ui_li_gen_1346941792342_1-content.IN-top {display:inline !important;font-size:16px !important;color:#04558B !important;font-weight:bold !important;font-family:Arial, sans-serif !important;line-height:34px !important;}#li_ui_li_gen_1346941792342_1-container.IN-hovered #li_ui_li_gen_1346941792342_1.IN-top, #li_ui_li_gen_1346941792342_1-container.IN-clicked #li_ui_li_gen_1346941792342_1.IN-top, #li_ui_li_gen_1346941792342_1-container.IN-down #li_ui_li_gen_1346941792342_1.IN-top {background-position-x:-210px !important;}#li_ui_li_gen_1346941792342_1-container.IN-empty #li_ui_li_gen_1346941792342_1-inner.IN-top {background:url(http://static02.linkedin.com/scds/common/u/img/sprite/sprite_connect_v13.png) 0px -20px no-repeat !important;overflow:hidden !important;margin:5px auto 0 auto !important;width:26px !important;height:26px !important;display:block !important;}#li_ui_li_gen_1346941792342_1-container.IN-empty #li_ui_li_gen_1346941792342_1-content.IN-top {text-indent:-999px !important;display:inline-block !important;}#li_ui_li_gen_1346941792342_1-container.IN-hidden #li_ui_li_gen_1346941792342_1 {display:none !important;}</style></head> <body data-twttr-rendered="true"><iframe src="winsock-multi-client-servers_files/hub.htm" style="position: absolute; top: -9999em; width: 10px; height: 10px;" name="twttrHubFrameSecure" tabindex="0" allowtransparency="true" id="twttrHubFrameSecure" frameborder="0" scrolling="no"></iframe><iframe src="winsock-multi-client-servers_files/hub_002.htm" style="position: absolute; top: -9999em; width: 10px; height: 10px;" name="twttrHubFrame" tabindex="0" allowtransparency="true" id="twttrHubFrame" frameborder="0" scrolling="no"></iframe>  <!-- google_ad_section_start(weight=ignore) --> <div id="userbar-container" align="center"> <div class="fixed-width"> <div id="control-panel"> <ul> <li class="highlight"><a href="http://www.daniweb.com/members/join">Join DaniWeb</a></li> <li><a href="#" id="login">Member Login</a></li> <li><a href="https://www.facebook.com/dialog/oauth/?client_id=135220243179040&amp;redirect_uri=http%3A%2F%2Fwww.daniweb.com%2Fmembers%2Fauthorize%2Ffacebook&amp;state=d47dcad9cb76fc44f91b242350259f8c&amp;scope=email,user_birthday" rel="nofollow">Log In with Facebook</a></li> </ul> </div>	
	
					981,955 Members — <em>Technology Publication meets Social Media</em> </div> </div> <div id="header" align="center"> <div class="fixed-width"> <form action="http://www.daniweb.com/search/query" method="post" accept-charset="utf-8" class="user-input right top-spaced"><div style="display:none"> <input name="csrf_token" value="d47dcad9cb76fc44f91b242350259f8c" type="hidden"> </div> <input class="medium" name="query" value="chat program 1 server multi client in c" type="text"> <input name="search" value="Search" type="submit"> </form> <div id="logo"> <div class="big">&lt; DaniWeb &gt; ® IT Discussion Community</div> <div class="small">Technology Publication meets Social Media</div> </div> </div> </div> <div id="navigation" align="center"> <ul id="navlist"> <li id="menu1"><a href="http://www.daniweb.com/hardware-and-software/1">Hardware &amp; Software</a><ul><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/microsoft-windows/99">Microsoft Windows</a><ul><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/microsoft-windows/windows-vista-and-windows-7-8/38">Windows Vista and Windows 7 / 8</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/microsoft-windows/windows-nt-2000-xp/10">Windows NT / 2000 / XP</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/microsoft-windows/windows-servers/115">Windows Servers</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/microsoft-windows/viruses-spyware-and-other-nasties/64">Viruses, Spyware and other Nasties</a></li></ul></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/linux-and-unix/12">Linux and Unix</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/pc-hardware/7">PC Hardware</a><ul><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/pc-hardware/cases-fans-and-power-supplies/123">Cases, Fans and Power Supplies</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/pc-hardware/motherboards-cpus-and-ram/104">Motherboards, CPUs and RAM</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/pc-hardware/storage/105">Storage</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/pc-hardware/pci-and-add-in-cards/106">PCI and Add-In Cards</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/pc-hardware/monitors-displays-and-video-cards/121">Monitors, Displays and Video Cards</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/pc-hardware/usb-devices-and-other-peripherals/107">USB Devices and other Peripherals</a></li></ul></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/apple/11">Apple</a><ul><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/apple/mac-os-x/109">Mac OS X</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/apple/ios-iphone-os/101">iOS (iPhone OS)</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/apple/apple-hardware-and-devices/103">Apple Hardware and Devices</a></li></ul></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/networking/13">Networking</a></li><li class="subforum"><a href="http://www.daniweb.com/hardware-and-software/tablets-and-mobile-devices/98">Tablets and Mobile Devices</a></li></ul></li> <li id="menu2" class="in-forum"><a href="http://www.daniweb.com/software-development/2">Software Development</a><ul><li class="subforum"><a href="http://www.daniweb.com/software-development/cpp/8">C++</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/c/118">C</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/java/9">Java</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/csharp/61">C#</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/vbnet/58">VB.NET</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/objective-c/34">Objective-C</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/python/114">Python</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/perl/112">Perl</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/shell-scripting/113">Shell Scripting</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/assembly/125">Assembly</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/pascal-and-delphi/124">Pascal and Delphi</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/visual-basic-4-5-6/4">Visual Basic 4 / 5 / 6</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/xml-xslt-and-xpath/134">XML, XSLT and XPATH</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/legacy-languages/42">Legacy Languages</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/computer-science/14">Computer Science</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/game-development/71">Game Development</a></li><li class="subforum"><a href="http://www.daniweb.com/software-development/mobile-development/181">Mobile Development</a></li></ul></li> <li id="menu31"><a href="http://www.daniweb.com/web-development/31">Web Development</a><ul><li class="subforum"><a href="http://www.daniweb.com/web-development/php/17">PHP</a></li><li class="subforum"><a href="http://www.daniweb.com/web-development/aspnet/18">ASP.NET</a></li><li class="subforum"><a href="http://www.daniweb.com/web-development/coldfusion/19">ColdFusion</a></li><li class="subforum"><a href="http://www.daniweb.com/web-development/asp/62">ASP</a></li><li class="subforum"><a href="http://www.daniweb.com/web-development/jsp/24">JSP</a></li><li class="subforum"><a href="http://www.daniweb.com/web-development/ruby/73">Ruby</a></li><li class="subforum"><a href="http://www.daniweb.com/web-development/databases/16">Databases</a><ul><li class="subforum"><a href="http://www.daniweb.com/web-development/databases/mysql/126">MySQL</a></li><li class="subforum"><a href="http://www.daniweb.com/web-development/databases/ms-sql/127">MS SQL</a></li><li class="subforum"><a href="http://www.daniweb.com/web-development/databases/oracle/129">Oracle</a></li></ul></li><li class="subforum"><a href="http://www.daniweb.com/web-development/rss-web-services-and-soap/151">RSS, Web Services and SOAP</a></li><li class="subforum"><a href="http://www.daniweb.com/web-development/javascript-dhtml-ajax/117">JavaScript / DHTML / AJAX</a></li><li class="subforum"><a href="http://www.daniweb.com/web-development/web-design-html-and-css/15">Web Design, HTML and CSS</a></li></ul></li> <li id="menu25"><a href="http://www.daniweb.com/internet-marketing/25">Internet Marketing</a><ul><li class="subforum"><a href="http://www.daniweb.com/internet-marketing/promotion-and-marketing-plans/43">Promotion and Marketing Plans</a></li><li class="subforum"><a href="http://www.daniweb.com/internet-marketing/social-media-and-communities/50">Social Media and Communities</a></li><li class="subforum"><a href="http://www.daniweb.com/internet-marketing/advertising-sales-strategies/30">Advertising Sales Strategies</a></li><li class="subforum"><a href="http://www.daniweb.com/internet-marketing/ecommerce/46">eCommerce</a></li><li class="subforum"><a href="http://www.daniweb.com/internet-marketing/pay-per-click-advertising/148">Pay-Per-Click Advertising</a></li><li class="subforum"><a href="http://www.daniweb.com/internet-marketing/search-engine-optimization/45">Search Engine Optimization</a></li></ul></li> <li id="menu152-noaccess"><a href="http://www.daniweb.com/business-exchange/152">Business Exchange</a></li> <li id="menu3"><a href="http://www.daniweb.com/community-center/3">Community Center</a><ul><li class="subforum"><a href="http://www.daniweb.com/community-center/community-introductions/165">Community Introductions</a></li><li class="subforum"><a href="http://www.daniweb.com/community-center/geeks-lounge/6">Geeks' Lounge</a></li><li class="subforum"><a href="http://www.daniweb.com/community-center/posting-games/80">Posting Games</a></li><li class="subforum"><a href="http://www.daniweb.com/community-center/daniweb-community-feedback/26">DaniWeb Community Feedback</a></li></ul></li> </ul> </div> <div id="login-form" title="Log into our Community"> <form action="http://www.daniweb.com/members/login" method="post" accept-charset="utf-8"><div style="display:none"> <input name="csrf_token" value="d47dcad9cb76fc44f91b242350259f8c" type="hidden"> </div> <div>Username: <input name="username" type="text"></div> <div>Password: <input name="password" type="password"></div> <input value="Log In" type="submit"> <a href="http://www.daniweb.com/members/lost_password">Lost login information?</a> <input name="referer" value="software-development/cpp/threads/6811/winsock-multi-client-servers" type="hidden"> </form> </div> <!-- google_ad_section_end --> <div id="body" align="center"> <div class="fluid-width"> <div id="breadcrumb"> <span itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb"> <a href="http://www.daniweb.com/software-development/2" itemprop="url" rel="up"><span itemprop="title">Software Development</span></a> </span>	
		&gt;
			<span itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb"> <a href="http://www.daniweb.com/software-development/cpp/8" itemprop="url" rel="up"><span itemprop="title">C++</span></a> </span>	
		&gt;
			<span id="page-title">Winsock Multi-Client Servers</span> </div> <a href="http://www.daniweb.com/software-development/cpp/8/contribute" class="button cta-button">Start New Discussion</a> <a href="#" class="button cta-button" id="reply-button">Reply to this Discussion</a> <div id="text-ad"> <span class="small">Ad:</span> <a href="http://links.industrybrains.com/click?sid=741&amp;rqctid=5420&amp;pos=1&amp;lid=722601&amp;cid=150897&amp;pr=2&amp;tstamp=20120906102826&amp;ltype=NA&amp;lname=&amp;url=http://hs.maas360.com/main-site-theme-3/%3fid%3d339%26K%3d%7bkeyword%7d%26A%3dmarchex%26O%3dHS%26utm_source%3dmarchex%26utm_medium%3dcpc%26utm_campaign%3dmx" rel="nofollow" target="_blank">iPhone Enterprise Management Guide</a> </div> <div id="posts" data-articleid="6811"> <div class="border"> <div id="static-posts"> <div id="adsense-top"><div class="post"><div class="adsense-body"><div class="ad-google"><a href="http://www.google.com/url?ct=abg&amp;q=https://www.google.com/adsense/support/bin/request.py%3Fcontact%3Dabg_afc%26url%3Dhttp://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers%26gl%3DIN%26hl%3Den%26client%3Dca-pub-8426641637123945%26ai0%3DBS-2ZT7NIUO2jM4TDiged8ICYCbrJ8ckCmo74mTHAjbcB0MadDBABGAEgj6r1ATgAUNizmvr4_____wFg5YKAgNgOsgEPd3d3LmRhbml3ZWIuY29tugEJNzI4eDkwX2pzyAEB2gFZaHR0cDovL3d3dy5kYW5pd2ViLmNvbS9zb2Z0d2FyZS1kZXZlbG9wbWVudC9jcHAvdGhyZWFkcy82ODExL3dpbnNvY2stbXVsdGktY2xpZW50LXNlcnZlcnOpAj7k1pWESlM-yALS3OAjqAMB6AMF6APbBfUDAAEAxPUDAAAAEOAGyqL_Dg&amp;usg=AFQjCNHKcvwL2ZYpc-DT7FkZQk7E4mFzfw">Ads by Google</a></div><div class="adsense-ad"><div><span class="ad-line1"><a onmouseout="window.status=''" onmouseover="window.status='go to www.Dell.com/Poweredge';return true" href="http://googleads.g.doubleclick.net/aclk?sa=L&amp;ai=BS-2ZT7NIUO2jM4TDiged8ICYCbrJ8ckCmo74mTHAjbcB0MadDBABGAEgj6r1ATgAUNizmvr4_____wFg5YKAgNgOsgEPd3d3LmRhbml3ZWIuY29tugEJNzI4eDkwX2pzyAEB2gFZaHR0cDovL3d3dy5kYW5pd2ViLmNvbS9zb2Z0d2FyZS1kZXZlbG9wbWVudC9jcHAvdGhyZWFkcy82ODExL3dpbnNvY2stbXVsdGktY2xpZW50LXNlcnZlcnOpAj7k1pWESlM-yALS3OAjqAMB6AMF6APbBfUDAAEAxPUDAAAAEOAGyqL_Dg&amp;num=1&amp;sig=AOD64_2EhndknYZG9HBGlatxQHRuoNdisQ&amp;client=ca-pub-8426641637123945&amp;adurl=http://lt.dell.com/lt/lt.aspx%3FCID%3D246679%26LID%3D4442142%26DGC%3DST%26DGSeg%3DLE%26DURL%3Dhttp://content.dell.com/us/en/corp/d/corp-comm/power-edge-servers">Dell Corporate Servers</a></span></div><div><span class="ad-line2">See the Benefits of Dell's 12th Gen PowerEdge Servers &amp; Intel® Xeon®</span><span class="ad-domain"><a onmouseout="window.status=''" onmouseover="window.status='go to www.Dell.com/Poweredge';return true" href="http://googleads.g.doubleclick.net/aclk?sa=L&amp;ai=BS-2ZT7NIUO2jM4TDiged8ICYCbrJ8ckCmo74mTHAjbcB0MadDBABGAEgj6r1ATgAUNizmvr4_____wFg5YKAgNgOsgEPd3d3LmRhbml3ZWIuY29tugEJNzI4eDkwX2pzyAEB2gFZaHR0cDovL3d3dy5kYW5pd2ViLmNvbS9zb2Z0d2FyZS1kZXZlbG9wbWVudC9jcHAvdGhyZWFkcy82ODExL3dpbnNvY2stbXVsdGktY2xpZW50LXNlcnZlcnOpAj7k1pWESlM-yALS3OAjqAMB6AMF6APbBfUDAAEAxPUDAAAAEOAGyqL_Dg&amp;num=1&amp;sig=AOD64_2EhndknYZG9HBGlatxQHRuoNdisQ&amp;client=ca-pub-8426641637123945&amp;adurl=http://lt.dell.com/lt/lt.aspx%3FCID%3D246679%26LID%3D4442142%26DGC%3DST%26DGSeg%3DLE%26DURL%3Dhttp://content.dell.com/us/en/corp/d/corp-comm/power-edge-servers">www.Dell.com/Poweredge</a></span></div></div></div></div></div> <div class="post post-op" id="post32835" data-postid="32835"> <div class="postbit-message"> <div class="push-postbit"> <div class="firstpost-message"> <div class="postbit-header"> <div class="titlebar"> <div class="left"> <span class="timestamp"><a href="http://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers#post32835">8 Years Ago</a></span> </div> <div class="votes"> <div class="vote">0</div> </div> <div class="clear"></div> </div> </div> <div class="postbit-body"> <div class="comments"></div> <h1 class="big">Winsock <mark>Multi</mark>-<mark>Client</mark> Servers</h1> <div class="message"> <!-- google_ad_section_start --> <div class="parsed-message"><pre snippet-index="0" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="typ">Creating</span><span class="pln"> </span><span class="typ">Servers</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> handling </span><span class="typ">Multiple</span><span class="pln"> clients</span></code></li><li class="L1"><code><span class="pln">                              </span><span class="typ">Fog</span><span class="pln"> </span><span class="typ">Edition</span></code></li><li class="L2"><code><span class="pln">			       </span><span class="typ">By</span><span class="pln"> </span><span class="typ">FireNet</span></code></li></ol></pre> <p><br> <br>
      (This document is dedicated to my friend Aaron Anderson)</p> <p>(Fog Edition means I dont tell you everything stright.All the info will be there but you will have to do much thinking)</p> <p>Servers and Clients,the backbone of the internet after the TCP/IP protocol.Right now I will go<br>
yak yak on TCP/IP so if you know it skip this.Also I intend not to provide you with everything.<br>
I will provide enought material and directions for you but you will have to do something on your<br>
own.I just teach you how to setup a basic <mark>server</mark> which can accept multiple connection and<br>
of course guidlines on how to make a robust <mark>server</mark>.We will also look into a very simple kind of<br> <mark>server</mark> '<mark>Chat</mark> servers'.</p> <p>TCP/IP<br>
-------<br>
TCP stands for Transmission Control Protocol.IP stands for Internet Protocol Address.TCP<br>
implementations provides a defined way about how data transmissions can be done over<br>
the wire between diffrent computers.There are a few sub protocols but we wont worry about <br>
them since they are at a lower level.</p> <p>OSI Model<br>
----------<br>
It is an open standard published by the ISO(International Standards Organisation) on how<br>
systems can recive and transmit data with each other.TCP/IP is an implemetation of it.<br>
It has 7 layers and each do a diffrent job.We dont want to go into details now.</p> <p>This helps various computer with diffrent hardware and OS to communicate with each other <br>
without any special work and diffrent OS can transfer data transperantly.This enable a <br>
network to consit of diffrent machines and still transfer data without a problem <a href="http://www.webopedia.com/quick_ref/OSI_Layers.asp" rel="nofollow">http://www.webopedia.com/quick_ref/OSI_Layers.asp</a></p> <p>How TCP works<br>
---------------<br>
A basic overview of course.When a <mark>client</mark> wants to connect to a <mark>server</mark> it send an SYN<br>
packet to the <mark>server</mark>.The <mark>server</mark> responds with a SYN/ACK packet to which the <mark>client</mark> responds<br>
with a ACK packet.<br> </p> <pre snippet-index="1" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><mark><span class="typ">Client</span></mark><span class="pln">  </span><span class="pun">---&gt;</span><span class="pln"> SYN  </span><span class="pun">---&gt;</span><span class="pln">  </span><mark><span class="typ">Server</span></mark><span class="pln"> </span><mark><span class="typ">Client</span></mark><span class="pln">  </span><span class="pun">&lt;---</span><span class="pln"> SYN</span><span class="pun">/</span><span class="pln">ACK  </span><span class="pun">&lt;---</span><span class="pln"> </span><mark><span class="typ">Server</span></mark><span class="pln"> </span><mark><span class="typ">Client</span></mark><span class="pln"> </span><span class="pun">----&gt;</span><span class="pln"> ACK  </span><span class="pun">---&gt;</span><span class="pln">  </span><mark><span class="typ">Server</span></mark></code></li></ol></pre> <p>This is called a 3 way TCP/IP hand shake.Then the connection is ready for transmitting data.<br>
The data sent is broken up into multiple packets and sent between the <mark>client</mark> and <mark>server</mark>.There<br>
are mechanisims to ensure that the packets are recived and assembled in the correct order<br>
and the data has not been corrupted.If it has been corrupted the data has to be retransmitted.<br>
Along with a lot more protections, error checks etc etc ....</p> <p>We never see any of this as they are handled at lower levels so we dont need to worry about them.</p> <p>Ports<br>
-----<br>
The ships dock here.Actually ports are a way to seperate diffrent connections.When a<br> <mark>client</mark> connects to a <mark>server</mark> there mabe more than one service running on that machine or if the data<br>
is sent to the <mark>client</mark> how,does one say which app gets that data.Ports range from 0-6255.They serve<br>
to identification which service a <mark>client</mark> wants to access or which <mark>client</mark> app should get the info.</p> <p>Now you got a very basic intro on how computers communicate we can go about designing servers.<br>
I will provide a basic <mark>client</mark> here with will be used for testing.We will not disscuss it much.</p> <pre snippet-index="2" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="com">/*-------------------Echo_client.cpp-------------------*/</span></code></li><li class="L1"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;windows.h&gt;</span></code></li><li class="L2"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;winsock.h&gt;</span></code></li><li class="L3"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;stdio.h&gt;</span></code></li><li class="L4"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;iostream.h&gt;</span></code></li><li class="L5"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;conio.h&gt;</span></code></li><li class="L6"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;signal.h&gt;</span></code></li><li class="L7"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;stdio.h&gt;</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="com">//DECLARATIONS</span></code></li><li class="L0"><code><span class="pln">	</span><span class="com">//error trapping signals</span></code></li><li class="L1"><code><span class="pln">	  </span><span class="com">#define</span><span class="pln"> SIGINT </span><span class="lit">2</span></code></li><li class="L2"><code><span class="pln">	  </span><span class="com">#define</span><span class="pln"> SIGKILL </span><span class="lit">9</span></code></li><li class="L3"><code><span class="pln">	  </span><span class="com">#define</span><span class="pln"> SIGQUIT </span><span class="lit">3</span></code></li><li class="L4"><code><span class="pln">	</span><span class="com">//SOCKETS</span></code></li><li class="L5"><code><span class="pln">	  SOCKET sock</span><span class="pun">,</span><mark><span class="pln">client</span></mark><span class="pun">;</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="kwd">void</span><span class="pln"> s_handle</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> s</span><span class="pun">)</span></code></li><li class="L8"><code><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">	</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">)</span></code></li><li class="L0"><code><span class="pln">	   closesocket</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">);</span></code></li><li class="L1"><code><span class="pln">	</span><span class="kwd">if</span><span class="pun">(</span><mark><span class="pln">client</span></mark><span class="pun">)</span></code></li><li class="L2"><code><span class="pln">	   closesocket</span><span class="pun">(</span><mark><span class="pln">client</span></mark><span class="pun">);</span></code></li><li class="L3"><code><span class="pln">	</span><span class="typ">WSACleanup</span><span class="pun">();</span></code></li><li class="L4"><code><span class="pln">	cout</span><span class="pun">&lt;&lt;</span><span class="str">"EXIT SIGNAL :"</span><span class="pun">&lt;&lt;</span><span class="pln">s</span><span class="pun">;</span></code></li><li class="L5"><code><span class="pln">	</span><span class="kwd">exit</span><span class="pun">(</span><span class="lit">0</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pun">}</span></code></li><li class="L7"><code></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="kwd">void</span><span class="pln"> s_cl</span><span class="pun">(</span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">a</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> x</span><span class="pun">)</span></code></li><li class="L0"><code><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">	cout</span><span class="pun">&lt;&lt;</span><span class="pln">a</span><span class="pun">;</span></code></li><li class="L2"><code><span class="pln">	s_handle</span><span class="pun">(</span><span class="pln">x</span><span class="pun">+</span><span class="lit">1000</span><span class="pun">);</span></code></li><li class="L3"><code><span class="pun">}</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="kwd">void</span><span class="pln"> main</span><span class="pun">()</span></code></li><li class="L6"><code><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">	</span><span class="com">//Declarations</span></code></li><li class="L8"><code><span class="pln">	</span><span class="kwd">int</span><span class="pln"> res</span><span class="pun">,</span><span class="pln">i</span><span class="pun">=</span><mark><span class="lit">1</span></mark><span class="pun">,</span><span class="pln">port</span><span class="pun">=</span><span class="lit">100</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">	</span><span class="kwd">char</span><span class="pln"> buf</span><span class="pun">[</span><span class="lit">100</span><span class="pun">];</span></code></li><li class="L0"><code><span class="pln">	WSADATA data</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">	</span></code></li><li class="L2"><code><span class="pln">	signal</span><span class="pun">(</span><span class="pln">SIGINT</span><span class="pun">,</span><span class="pln">s_handle</span><span class="pun">);</span></code></li><li class="L3"><code><span class="pln">	signal</span><span class="pun">(</span><span class="pln">SIGKILL</span><span class="pun">,</span><span class="pln">s_handle</span><span class="pun">);</span></code></li><li class="L4"><code><span class="pln">	signal</span><span class="pun">(</span><span class="pln">SIGQUIT</span><span class="pun">,</span><span class="pln">s_handle</span><span class="pun">);</span></code></li><li class="L5"><code><span class="pln">	</span></code></li><li class="L6"><code><span class="pln">	cout</span><span class="pun">&lt;&lt;</span><span class="str">"\t\tEcho </span><mark><span class="str">Client</span></mark><span class="str">"</span><span class="pun">;</span></code></li><li class="L7"><code><span class="pln">	</span></code></li><li class="L8"><code><span class="pln">	</span></code></li><li class="L9"><code><span class="pln">	sockaddr_in ser</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">	sockaddr addr</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">	</span></code></li><li class="L2"><code><span class="pln">	ser</span><span class="pun">.</span><span class="pln">sin_family</span><span class="pun">=</span><span class="pln">AF_INET</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">	ser</span><span class="pun">.</span><span class="pln">sin_port</span><span class="pun">=</span><span class="pln">htons</span><span class="pun">(</span><span class="pln">port</span><span class="pun">);</span><span class="pln">					</span><span class="com">//Set the port</span></code></li><li class="L4"><code><span class="pln">	ser</span><span class="pun">.</span><span class="pln">sin_addr</span><span class="pun">.</span><span class="pln">s_addr</span><span class="pun">=</span><span class="pln">inet_addr</span><span class="pun">(</span><span class="str">"127.0.0.</span><mark><span class="str">1</span></mark><span class="str">"</span><span class="pun">);</span><span class="pln">		</span><span class="com">//Set the address we want to connect to</span></code></li><li class="L5"><code><span class="pln">	</span></code></li><li class="L6"><code><span class="pln">	memcpy</span><span class="pun">(&amp;</span><span class="pln">addr</span><span class="pun">,&amp;</span><span class="pln">ser</span><span class="pun">,</span><span class="kwd">sizeof</span><span class="pun">(</span><span class="pln">SOCKADDR_IN</span><span class="pun">));</span></code></li><li class="L7"><code><span class="pln">	</span></code></li><li class="L8"><code><span class="pln">	res </span><span class="pun">=</span><span class="pln"> </span><span class="typ">WSAStartup</span><span class="pun">(</span><span class="pln">MAKEWORD</span><span class="pun">(</span><mark><span class="lit">1</span></mark><span class="pun">,</span><mark><span class="lit">1</span></mark><span class="pun">),&amp;</span><span class="pln">data</span><span class="pun">);</span><span class="pln">		</span><span class="com">//Start Winsock</span></code></li><li class="L9"><code><span class="pln">	cout</span><span class="pun">&lt;&lt;</span><span class="str">"\n\nWSAStartup"</span></code></li><li class="L0"><code><span class="pln">		</span><span class="pun">&lt;&lt;</span><span class="str">"\nVersion: "</span><span class="pun">&lt;&lt;</span><span class="pln">data</span><span class="pun">.</span><span class="pln">wVersion</span></code></li><li class="L1"><code><span class="pln">		</span><span class="pun">&lt;&lt;</span><span class="str">"\nDescription: "</span><span class="pun">&lt;&lt;</span><span class="pln">data</span><span class="pun">.</span><span class="pln">szDescription</span></code></li><li class="L2"><code><span class="pln">		</span><span class="pun">&lt;&lt;</span><span class="str">"\nStatus: "</span><span class="pun">&lt;&lt;</span><span class="pln">data</span><span class="pun">.</span><span class="pln">szSystemStatus</span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">res </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L5"><code><span class="pln">		s_cl</span><span class="pun">(</span><span class="str">"WSAStarup failed"</span><span class="pun">,</span><span class="typ">WSAGetLastError</span><span class="pun">());</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">	sock</span><span class="pun">=</span><span class="pln">socket</span><span class="pun">(</span><span class="pln">AF_INET</span><span class="pun">,</span><span class="pln">SOCK_STREAM</span><span class="pun">,</span><span class="pln">IPPROTO_TCP</span><span class="pun">);</span><span class="pln">		</span><span class="com">//Create the socket</span></code></li><li class="L8"><code><span class="pln">		</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">==</span><span class="pln">INVALID_SOCKET </span><span class="pun">)</span></code></li><li class="L9"><code><span class="pln">			s_cl</span><span class="pun">(</span><span class="str">"Invalid Socket "</span><span class="pun">,</span><span class="typ">WSAGetLastError</span><span class="pun">());</span></code></li><li class="L0"><code><span class="pln">		</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">==</span><span class="pln">SOCKET_ERROR</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pln">			s_cl</span><span class="pun">(</span><span class="str">"Socket Error)"</span><span class="pun">,</span><span class="typ">WSAGetLastError</span><span class="pun">());</span></code></li><li class="L2"><code><span class="pln">		</span><span class="kwd">else</span></code></li><li class="L3"><code><span class="pln">			cout</span><span class="pun">&lt;&lt;</span><span class="str">"Socket Established"</span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L4"><code><span class="pln">	</span></code></li><li class="L5"><code><span class="pln">	res</span><span class="pun">=</span><span class="pln">connect</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">,&amp;</span><span class="pln">addr</span><span class="pun">,</span><span class="kwd">sizeof</span><span class="pun">(</span><span class="pln">addr</span><span class="pun">));</span><span class="pln">				</span><span class="com">//Connect to the </span><mark><span class="com">server</span></mark></code></li><li class="L6"><code><span class="pln">		</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">res </span><span class="pun">!=</span><span class="lit">0</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L7"><code><span class="pln">		</span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">			s_cl</span><span class="pun">(</span><span class="str">"</span><mark><span class="str">SERVER</span></mark><span class="str"> UNAVAILABLE"</span><span class="pun">,</span><span class="pln">res</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">		</span><span class="kwd">else</span></code></li><li class="L1"><code><span class="pln">		</span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">			cout</span><span class="pun">&lt;&lt;</span><span class="str">"\nConnected to </span><mark><span class="str">Server</span></mark><span class="str">: "</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">			memcpy</span><span class="pun">(&amp;</span><span class="pln">ser</span><span class="pun">,&amp;</span><span class="pln">addr</span><span class="pun">,</span><span class="kwd">sizeof</span><span class="pun">(</span><span class="pln">SOCKADDR</span><span class="pun">));</span></code></li><li class="L4"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L5"><code><span class="pln">	</span></code></li><li class="L6"><code><span class="pln">	</span><span class="kwd">while</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span></code></li><li class="L7"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">		cout</span><span class="pun">&lt;&lt;</span><span class="str">"\n&gt;"</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">		gets</span><span class="pun">(</span><span class="pln">buf</span><span class="pun">);</span></code></li><li class="L0"><code><span class="pln">		</span></code></li><li class="L1"><code><span class="pln">		res </span><span class="pun">=</span><span class="pln">  send</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">,</span><span class="pln">buf</span><span class="pun">,</span><span class="lit">100</span><span class="pun">,</span><span class="lit">0</span><span class="pun">);</span><span class="pln">		</span><span class="com">//Send Data</span></code></li><li class="L2"><code><span class="pln">	</span></code></li><li class="L3"><code><span class="pln">		</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">res</span><span class="pun">==</span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L4"><code><span class="pln">		</span><span class="pun">{</span><span class="pln">	</span></code></li><li class="L5"><code><span class="pln">			</span><span class="com">//0==other side terminated conn</span></code></li><li class="L6"><code><span class="pln">			printf</span><span class="pun">(</span><span class="str">"\nSERVER terminated connection\n"</span><span class="pun">);</span></code></li><li class="L7"><code><span class="pln">			closesocket</span><span class="pun">(</span><mark><span class="pln">client</span></mark><span class="pun">);</span></code></li><li class="L8"><code><span class="pln">			</span><mark><span class="pln">client</span></mark><span class="pln"> </span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">			</span><span class="kwd">break</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L1"><code><span class="pln">		</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">res</span><span class="pun">==</span><span class="pln">SOCKET_ERROR</span><span class="pun">)</span></code></li><li class="L2"><code><span class="pln">		</span><span class="pun">{</span><span class="pln">	</span></code></li><li class="L3"><code><span class="pln">			</span><span class="com">//-</span><mark><span class="com">1</span></mark><span class="com"> == send error</span></code></li><li class="L4"><code><span class="pln">			printf</span><span class="pun">(</span><span class="str">"Socket error\n"</span><span class="pun">);</span></code></li><li class="L5"><code><span class="pln">			s_handle</span><span class="pun">(</span><span class="pln">res</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">			</span><span class="kwd">break</span><span class="pun">;</span></code></li><li class="L7"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L8"><code><span class="pln">		</span></code></li><li class="L9"><code><span class="pln">		</span></code></li><li class="L0"><code><span class="pln">	res</span><span class="pun">=</span><span class="pln">recv</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">,</span><span class="pln">buf</span><span class="pun">,</span><span class="lit">100</span><span class="pun">,</span><span class="lit">0</span><span class="pun">);</span><span class="pln">		</span><span class="com">//Recive Data</span></code></li><li class="L1"><code><span class="pln">	</span></code></li><li class="L2"><code><span class="pln">	</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">res</span><span class="pun">&gt;</span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L3"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">		cout</span><span class="pun">&lt;&lt;</span><span class="str">"\nRecieved string:"</span><span class="pun">&lt;&lt;</span><span class="pln">buf</span><span class="pun">;</span></code></li><li class="L5"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L6"><code><span class="pln">	</span></code></li><li class="L7"><code><span class="pln">  </span><span class="pun">}</span><span class="pln">	</span></code></li><li class="L8"><code><span class="pln">	</span><span class="typ">WSACleanup</span><span class="pun">();</span></code></li><li class="L9"><code><span class="pun">}</span></code></li><li class="L0"><code><span class="com">/*-------------------Echo_client.cpp-------------------*/</span></code></li></ol></pre> <p><mark>Server</mark> Mania<br>
-------------<br>
There is a curse which goes "May you live in interesting times" and making servers will only help it.<br>
Planning is as improtant here as it is else where.I will give a few basics by which you should be able<br>
to plan and build your own servers with multiple <mark>client</mark> support.</p> <p>We will build a single thread <mark>server</mark> with support for multiple clients.All info about a <mark>client</mark> will be kept <br>
in a structure and funtions will use that info to perform various jobs.</p> <p><mark>Client</mark> Sturcture:</p> <pre snippet-index="3" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="kwd">struct</span><span class="pln"> _client</span></code></li><li class="L1"><code><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">	</span><span class="kwd">bool</span><span class="pln"> con</span><span class="pun">;</span><span class="pln">			</span><span class="com">//Set true if a </span><mark><span class="com">client</span></mark><span class="com"> is connected</span></code></li><li class="L3"><code><span class="pln">	sockaddr_in addr</span><span class="pun">;</span><span class="pln">	</span><span class="com">//</span><mark><span class="com">Client</span></mark><span class="com"> info like ip address</span></code></li><li class="L4"><code><span class="pln">	SOCKET cs</span><span class="pun">;</span><span class="pln">		</span><span class="com">//</span><mark><span class="com">Client</span></mark><span class="com"> socket</span></code></li><li class="L5"><code><span class="pln">	fd_set </span><span class="kwd">set</span><span class="pun">;</span><span class="pln">			</span><span class="com">//used to check if there is data in the socket</span></code></li><li class="L6"><code><span class="pln">	</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">;</span><span class="pln">				</span><span class="com">//any piece of additional info</span></code></li><li class="L7"><code><span class="pun">};</span></code></li></ol></pre> <p>The obvious funtions we need are:</p> <pre snippet-index="4" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="pln">accept</span><span class="pun">(</span><span class="pln">_client </span><span class="pun">*);</span><span class="pln">		</span><span class="com">//accept </span><mark><span class="com">client</span></mark><span class="com"> connections</span></code></li><li class="L1"><code><span class="pln">recv</span><span class="pun">(</span><span class="pln">_client </span><span class="pun">*);</span><span class="pln">			</span><span class="com">//recive data from them</span></code></li><li class="L2"><code><span class="pln">send</span><span class="pun">(</span><span class="pln">_client </span><span class="pun">*);</span><span class="pln">			</span><span class="com">//send data</span></code></li></ol></pre> <p>Globals:</p> <pre snippet-index="5" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="pln">MAX_CONS		</span><span class="com">//Total No of </span><mark><span class="com">Client</span></mark><span class="com"> allowed</span></code></li><li class="L1"><code><span class="pln">PR_CONS		</span><span class="com">//No of currently connected clients</span></code></li></ol></pre> <p>We will build a version of an echo <mark>server</mark>.Any data sent by any <mark>client</mark> is sent to all the clients connected.<br> <mark>Chat</mark> <mark>server</mark> work in a similar manner.We will be doing a bare bones <mark>server</mark> and wont put in too much<br>
error checking.</p> <p><br>
Basic <mark>Server</mark> Skeleton<br>
---------------------<br>
This describes how a <mark>server</mark> is structured.</p> <p><mark>1</mark>.Initialise a few variables i.e. the port,ip etc of the <mark>server</mark><br>
2.Start Winsock.(A must for windows <mark>server</mark> and clients)<br>
3.Create the Socket<br>
4.Set the Socket options<br>
5.Bind the <mark>server</mark> to a port<br>
6.Set Listen Mode<br>
7.Set non-blocking mode.(Important if your <mark>server</mark> supports multiple clients or is gui)<br>
8.Start the <mark>server</mark> loop<br>
9.Exit <mark>server</mark> loop and cleaup memory<br>
10.Stop Winsock.</p> <p>Note:Of course most parts have their own error checks.</p> <p>Now the <mark>server</mark> is not very much diffrent from the <mark>client</mark> see below for steps <mark>1</mark> to 7.</p> <pre snippet-index="6" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="com">/****************</span><mark><span class="com">SERVER</span></mark><span class="com">.cpp****************/</span></code></li><li class="L1"><code><span class="kwd">void</span><span class="pln"> main</span><span class="pun">()</span></code></li><li class="L2"><code><span class="pun">{</span></code></li><li class="L3"><code><span class="pln">	</span><span class="kwd">int</span><span class="pln"> res</span><span class="pun">,</span><span class="pln">i</span><span class="pun">=</span><mark><span class="lit">1</span></mark><span class="pun">,</span><span class="pln">port</span><span class="pun">=</span><span class="lit">100</span><span class="pun">;</span></code></li><li class="L4"><code><span class="pln">	WSADATA data</span><span class="pun">;</span></code></li><li class="L5"><code><span class="pln">	</span></code></li><li class="L6"><code><span class="pln">	cout</span><span class="pun">&lt;&lt;</span><span class="str">"\t\tEcho </span><mark><span class="str">Server</span></mark><span class="str"> (Multiple </span><mark><span class="str">Client</span></mark><span class="str"> Support)"</span><span class="pun">;</span></code></li><li class="L7"><code><span class="pln">	</span></code></li><li class="L8"><code><span class="pln">	sockaddr_in ser</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">	sockaddr addr</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">	ser</span><span class="pun">.</span><span class="pln">sin_family		</span><span class="pun">=</span><span class="pln">	AF_INET</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">	ser</span><span class="pun">.</span><span class="pln">sin_port		</span><span class="pun">=</span><span class="pln">	htons</span><span class="pun">(</span><span class="pln">port</span><span class="pun">);</span></code></li><li class="L2"><code><span class="pln">	ser</span><span class="pun">.</span><span class="pln">sin_addr</span><span class="pun">.</span><span class="pln">s_addr 	</span><span class="pun">=</span><span class="pln"> 	INADDR_ANY</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">	</span></code></li><li class="L4"><code><span class="pln">	memcpy</span><span class="pun">(&amp;</span><span class="pln">addr</span><span class="pun">,&amp;</span><span class="pln">ser</span><span class="pun">,</span><span class="kwd">sizeof</span><span class="pun">(</span><span class="pln">SOCKADDR_IN</span><span class="pun">));</span><span class="pln">	</span></code></li><li class="L5"><code><span class="pln">	</span></code></li><li class="L6"><code><span class="pln">	res </span><span class="pun">=</span><span class="pln"> </span><span class="typ">WSAStartup</span><span class="pun">(</span><span class="pln">MAKEWORD</span><span class="pun">(</span><mark><span class="lit">1</span></mark><span class="pun">,</span><mark><span class="lit">1</span></mark><span class="pun">),&amp;</span><span class="pln">data</span><span class="pun">);</span></code></li><li class="L7"><code><span class="pln">	cout</span><span class="pun">&lt;&lt;</span><span class="str">"\n\nWSAStartup"</span></code></li><li class="L8"><code><span class="pln">		</span><span class="pun">&lt;&lt;</span><span class="str">"\n Version: "</span><span class="pun">&lt;&lt;</span><span class="pln">data</span><span class="pun">.</span><span class="pln">wVersion</span></code></li><li class="L9"><code><span class="pln">		</span><span class="pun">&lt;&lt;</span><span class="str">"\n Description: "</span><span class="pun">&lt;&lt;</span><span class="pln">data</span><span class="pun">.</span><span class="pln">szDescription</span></code></li><li class="L0"><code><span class="pln">		</span><span class="pun">&lt;&lt;</span><span class="str">"\n Status: "</span><span class="pun">&lt;&lt;</span><span class="pln">data</span><span class="pun">.</span><span class="pln">szSystemStatus</span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">	</span></code></li><li class="L2"><code><span class="pln">	</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">res </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L3"><code><span class="pln">		s_cl</span><span class="pun">(</span><span class="str">"WSAStarup failed"</span><span class="pun">,</span><span class="typ">WSAGetLastError</span><span class="pun">());</span></code></li><li class="L4"><code><span class="pln">	</span></code></li><li class="L5"><code><span class="pln">	sock </span><span class="pun">=</span><span class="pln"> socket</span><span class="pun">(</span><span class="pln">AF_INET</span><span class="pun">,</span><span class="pln">SOCK_STREAM</span><span class="pun">,</span><span class="pln">IPPROTO_TCP</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">		</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">==</span><span class="pln">INVALID_SOCKET </span><span class="pun">)</span></code></li><li class="L7"><code><span class="pln">			s_cl</span><span class="pun">(</span><span class="str">"Invalid Socket "</span><span class="pun">,</span><span class="typ">WSAGetLastError</span><span class="pun">());</span></code></li><li class="L8"><code><span class="pln">		</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">==</span><span class="pln">SOCKET_ERROR</span><span class="pun">)</span></code></li><li class="L9"><code><span class="pln">			s_cl</span><span class="pun">(</span><span class="str">"Socket Error)"</span><span class="pun">,</span><span class="typ">WSAGetLastError</span><span class="pun">());</span></code></li><li class="L0"><code><span class="pln">		</span><span class="kwd">else</span></code></li><li class="L1"><code><span class="pln">			cout</span><span class="pun">&lt;&lt;</span><span class="str">"SOCKET Established"</span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L2"><code><span class="pln">	</span></code></li><li class="L3"><code><span class="pln">	setsockopt</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">,</span><span class="pln">SOL_SOCKET</span><span class="pun">,</span><span class="pln">SO_REUSEADDR</span><span class="pun">,(</span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*)&amp;</span><span class="pln">i</span><span class="pun">,</span><span class="kwd">sizeof</span><span class="pln"> </span><span class="pun">(</span><span class="pln">i</span><span class="pun">));</span></code></li><li class="L4"><code><span class="pln">	</span></code></li><li class="L5"><code><span class="pln">	res </span><span class="pun">=</span><span class="pln"> bind</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">,&amp;</span><span class="pln">addr</span><span class="pun">,</span><span class="kwd">sizeof</span><span class="pun">(</span><span class="pln">addr</span><span class="pun">));</span></code></li><li class="L6"><code><span class="pln">	cout</span><span class="pun">&lt;&lt;</span><span class="str">"Binding socket:"</span><span class="pun">&lt;&lt;</span><span class="pln">res</span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L7"><code><span class="pln">		</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">res </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L8"><code><span class="pln">			s_cl</span><span class="pun">(</span><span class="str">"BIND FAILED"</span><span class="pun">,</span><span class="typ">WSAGetLastError</span><span class="pun">());</span></code></li><li class="L9"><code><span class="pln">		</span><span class="kwd">else</span></code></li><li class="L0"><code><span class="pln">			cout</span><span class="pun">&lt;&lt;</span><span class="str">"Socket Bound to port : "</span><span class="pun">&lt;&lt;</span><span class="pln">port</span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">	</span></code></li><li class="L2"><code><span class="pln">	</span></code></li><li class="L3"><code><span class="pln">	res </span><span class="pun">=</span><span class="pln"> listen</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">,</span><span class="lit">5</span><span class="pun">);</span></code></li><li class="L4"><code><span class="pln">	cout</span><span class="pun">&lt;&lt;</span><span class="str">"</span><mark><span class="str">Server</span></mark><span class="str"> Listen mode : "</span><span class="pun">&lt;&lt;</span><span class="pln">res</span><span class="pun">&lt;&lt;</span><span class="str">" Size = "</span><span class="pun">&lt;&lt;</span><span class="pln">m</span><span class="pun">*</span><span class="lit">2</span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L5"><code><span class="pln">	</span></code></li><li class="L6"><code><span class="pln">	</span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">long</span><span class="pln"> b</span><span class="pun">=</span><mark><span class="lit">1</span></mark><span class="pun">;</span></code></li><li class="L7"><code><span class="pln">	ioctlsocket</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">,</span><span class="pln">FIONBIO</span><span class="pun">,&amp;</span><span class="pln">b</span><span class="pun">);</span></code></li><li class="L8"><code><span class="com">/****************</span><mark><span class="com">SERVER</span></mark><span class="com">.cpp****************/</span></code></li></ol></pre> <p>Notes<br>
------</p> <p><mark>1</mark>.htons()      <br>
This funtions is used make port numbers correct according the hardware.This is<br>
due to the fact the diffrent hardware store numbers diffrently.If this is not called<br>
clients from other computers will not be able to establish a connection.</p> <p>2.bind()   - binds the <mark>server</mark> to a specified port</p> <p>3.listen()<br>
This is used to set the listen mode and set the max amount of packets that will be allowed<br>
to be stored at a time.If the no of packets exceed the limit they will be conveniently dropped.</p> <p>4.ioctlsocket();<br>
Set the blocking mode.Set b to one to make the socket a non-blocking one.In non blocking<br>
mode the funtions will return immediately even if they have not got any respone.This will prevent<br>
them from stopping the <mark>program</mark> operation till they get a response.This will enable us to loop through<br>
all the clients and respond to the ones who have sent commands.Eg.In blocking mode the accept()<br>
will wait till it recives a connection before it returns and in non-blocking mode it returns immediately.</p> <p><br> <mark>Server</mark> Loop<br>
------------<br>
This is where all the work of a <mark>server</mark> is done</p> <pre snippet-index="7" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="kwd">while</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">	accept_clients</span><span class="pun">();</span><span class="pln">		</span><span class="com">//Recive connections</span></code></li><li class="L3"><code><span class="pln">	send_clients</span><span class="pun">();</span><span class="pln">		</span><span class="com">//Send data to clients</span></code></li><li class="L4"><code><span class="pln">	recv_clients</span><span class="pun">();</span><span class="pln">		</span><span class="com">//Recive data from clients</span></code></li><li class="L5"><code><span class="pun">}</span></code></li></ol></pre> <p>That's it basically.Of course the the 3 funtions will be very similar to a simple <mark>server</mark> but they will<br>
also have to handle some more work.</p> <p><br>
Low Level funtions<br>
------------------<br>
In a simple <mark>server</mark> we used funtions accept(),send(),recv() to interact with the <mark>client</mark>.<br>
We will now overload them to do our work.</p> <p><br>
Accept funtion<br>
---------------</p> <pre snippet-index="8" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="kwd">int</span><span class="pln"> accept</span><span class="pun">(</span><span class="pln">_client </span><span class="pun">*</span><span class="pln">x</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">	x</span><span class="pun">-&gt;</span><span class="pln">i </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">sizeof</span><span class="pun">(</span><span class="pln">sockaddr</span><span class="pun">);</span></code></li><li class="L3"><code><span class="pln">	x</span><span class="pun">-&gt;</span><span class="pln">cs </span><span class="pun">=</span><span class="pln"> accept</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">,(</span><span class="pln">sockaddr </span><span class="pun">*)&amp;</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="pln">addr</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="pln">i</span><span class="pun">);</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">	</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">cs </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> cs </span><span class="pun">!=</span><span class="pln">SOCKET_ERROR</span><span class="pun">)</span></code></li><li class="L6"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">		x</span><span class="pun">-&gt;</span><span class="pln">con </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">		FD_ZERO</span><span class="pun">(&amp;</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="kwd">set</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">		FD_SET</span><span class="pun">(</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="pln">cs</span><span class="pun">,&amp;</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="kwd">set</span><span class="pun">);</span></code></li><li class="L0"><code><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span></code></li><li class="L1"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L2"><code><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">false</span><span class="pun">);</span></code></li><li class="L3"><code><span class="pun">}</span></code></li></ol></pre> <p>Notes<br>
------<br>
x-&gt;cs = accept(sock,(sockaddr *)&amp;x-&gt;addr, &amp;x-&gt;i)     <br>
is quite note worthy.Here we assign the return of the funtion to another SOCKET(x-&gt;cs) variable.<br>
We will be using this variable to communicate with the <mark>client</mark>.'sock' will be used only for <br>
accepting connections.</p> <p>(x-&gt;addr) will have all <mark>client</mark> related info like the IP address.</p> <p>The rest is simple.If the return is valid then set the connection status (i.e x-&gt;con) to true and<br>
initialise the fd_set.This will be used to check if data is present in the socket.</p> <p>Send Funtion<br>
-------------</p> <pre snippet-index="9" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="kwd">int</span><span class="pln"> send</span><span class="pun">(</span><span class="pln">_client </span><span class="pun">*</span><span class="pln">x</span><span class="pun">,</span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">buffer</span><span class="pun">,</span><span class="kwd">int</span><span class="pln"> sz</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">	x</span><span class="pun">-&gt;</span><span class="pln">i </span><span class="pun">=</span><span class="pln"> send</span><span class="pun">(</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="pln">cs</span><span class="pun">,</span><span class="pln">buffer</span><span class="pun">,</span><span class="pln">sz</span><span class="pun">,</span><span class="lit">0</span><span class="pun">);</span></code></li><li class="L3"><code><span class="pln">	</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="pln">i </span><span class="pun">==</span><span class="pln"> SOCKET_ERROR </span><span class="pun">||</span><span class="pln"> x</span><span class="pun">-&gt;</span><span class="pln">i </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L4"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">		disconnect</span><span class="pun">(</span><span class="pln">x</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">false</span><span class="pun">);</span></code></li><li class="L7"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L8"><code><span class="pln">	</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pun">}</span></code></li></ol></pre> <p>Notes<br>
x-&gt;i is used just because it's avilable,use another one if you like.<br>
If there is a socket error or the return is 0 disconnect.I recomment you<br>
find some out.We will be making disconnect() later.Zero means the <mark>client</mark><br>
has disconnecter.-<mark>1</mark> i.e socket error means the <mark>client</mark> is unreachable due<br>
to any reason.</p> <p>Recv Function<br>
--------------</p> <pre snippet-index="10" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="kwd">int</span><span class="pln"> recv</span><span class="pun">(</span><span class="pln">_client </span><span class="pun">*</span><span class="pln">x</span><span class="pun">,</span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">buffer</span><span class="pun">,</span><span class="kwd">int</span><span class="pln"> sz</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">	</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">FD_ISSET</span><span class="pun">(</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="pln">cs</span><span class="pun">,&amp;</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="kwd">set</span><span class="pun">))</span></code></li><li class="L3"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">		x</span><span class="pun">-&gt;</span><span class="pln">i </span><span class="pun">=</span><span class="pln"> recv</span><span class="pun">(</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="pln">cs</span><span class="pun">,</span><span class="pln">buffer</span><span class="pun">,</span><span class="pln">sz</span><span class="pun">,</span><span class="lit">0</span><span class="pun">);</span></code></li><li class="L5"><code><span class="pln">		</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="pln">i </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L6"><code><span class="pln">		</span><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">			disconnect</span><span class="pun">(</span><span class="pln">x</span><span class="pun">);</span></code></li><li class="L8"><code><span class="pln">			</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">false</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L2"><code><span class="pln">	</span></code></li><li class="L3"><code><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">false</span><span class="pun">);</span></code></li><li class="L4"><code><span class="pun">}</span></code></li></ol></pre> <p>That's it you have all the basic structre and low level stuff you need to build a simple <mark>server</mark>.<br>
Now we are free to tackle building a robust <mark>server</mark>.</p> <p>Building Robust Servers<br>
----------------------<br>
Bang,Crash,Hi,Hello,Crack,Oh master,ha,Woof............... sounds weird.Well they repesent<br>
how diffrent <mark>client</mark> connect and how they behave.Some leave by saying good bye others<br>
leave the line open,other disappear etc etc.</p> <p>So one of the most important things for any <mark>server</mark> would be to keep track of <mark>client</mark> connections.<br>
Connections appear and disappear at random so it best to have some central command to keep<br>
track of <mark>server</mark> status and various connection details.The major problem will be clients disappearing<br>
if we are not implementing a lot of checks( like now). We will be relying on the send funtion mainly to<br>
see if a <mark>client</mark> has left us or is unreachble.That means recv() will not show any error unless a <mark>client</mark><br>
has quit properly but send will pick up a missing <mark>client</mark>.This is not much of a problem since you will<br>
almost always have to send data to <mark>client</mark> continously.If no activity( i.e sending) then a improperly<br>
disconnected <mark>client</mark> will remain in the memory and will not noticed untill you send it some data.This<br>
should not pose any probs anyways so no need to worry about this.</p> <p>Its best to have a <mark>server</mark> as modular as possible to enable modifiactions (which will be extensive) <br>
without breaking any code.That would make things like porting(ie getting it to work on other OSs)<br>
upgrading etc easy.</p> <p>Oh yes there are always memory, it's alway limited, even if you are in a sea of memory,llike the old<br>
saying goes "water,water everywhere not drop to drink".Other problems include things like buffer<br>
overflows and illegal memory access.Brr goes crazy very quickly if your <mark>server</mark> has even <mark>1</mark> leak.</p> <p>Now these are the few common problems.There are more when you go to make your <mark>server</mark> more<br>
funtional.Following a few guidelines will sure help reduce them.(Noodles but you cant have it anyother<br>
way)</p> <p><mark>1</mark>.If random memory access is used always provide for errors and deallocate memory on crashing<br>
2.As far as possible never hard code anything.<br>
3.Use defines when values have to be hard coded<br>
4.Modularity is a must.Keep funtional code seperate from network code<br>
5.Memory should always be conserved.<br>
6.If linked lists are used, use a manager class to use them through,never directly<br>
7.Seperate your code into diffrent segments and keep them in diffrent headers<br>
8.Always develop funtions to check the status and look for errors on your <mark>server</mark> including <br>
  but not limited to  no. of clients, memory usage, <mark>client</mark> details etc.<br>
9.Try for max performance even if you are on a supercomputer.</p> <p>This should be enough for a start.I will only discuss a few of them.The others you have to<br>
figure out.</p> <p>Modularity<br>
----------<br>
Oh,well you should know it so I will just brush on it.Why you still need it?Security<br>
Yes,that wonderful oxcymoron.If all your send and recive are channeled through<br>
one place it will be eaiser to implemet restrictions and permmisions.So reduce the number<br>
of places you call recv(sock... or send(sock... to one place and use higher level funtions<br>
to call them.Try to limit the network code as much as possible.Also seperate the recive,<br>
send, and accept funtions.This will enable you to go <mark>multi</mark>-thread without trearing anything.</p> <p>Status and Error Monitering<br>
---------------------------<br>
Develop these early.They will be a great help for debuging your code.</p> <p>Well below you will see what a status monitor looks like.You can build diffrent ones if you like<br>
or even integrate it with the lower level funtions.It's better if all this goes to a central location<br>
as you will always be informed.</p> <p>Of course not just one funtion can do all the work.You will have to develop ones which will have to<br>
look at each connection as report details like the IP address etc.Also debug funtions.</p> <p>[Maybe more,but in a biginner tut it wont be of much use]</p> <p><br>
Back to coding ---- &gt;</p> <p>The <mark>server</mark> loop is given below.You will have to develop the funtions on your own.Hey do say<br>
this is a tut and all has to be told.I did tell everything.I gave you funtions to handle send, recive<br>
and accept through the <mark>client</mark> structure dint I.All you have to do now is make a glorified loop.</p> <pre snippet-index="11" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="kwd">while</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">	accept_clients</span><span class="pun">();</span><span class="pln">		</span><span class="com">//Recive connections</span></code></li><li class="L3"><code><span class="pln">	send_clients</span><span class="pun">();</span><span class="pln">		</span><span class="com">//Send data to clients</span></code></li><li class="L4"><code><span class="pln">	recv_clients</span><span class="pun">();</span><span class="pln">		</span><span class="com">//Recive data from clients</span></code></li><li class="L5"><code><span class="pun">}</span></code></li></ol></pre> <p>I wont leave you hanging up on a tree though</p> <pre snippet-index="12" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="pln">_client </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">MAX_CONS</span><span class="pun">];</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="kwd">void</span><span class="pln"> accept_clients</span><span class="pun">()</span></code></li><li class="L3"><code><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln">i</span><span class="pun">&lt;</span><span class="pln">MAX_CONS</span><span class="pun">;</span><span class="pln">i</span><span class="pun">++)</span></code></li><li class="L5"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">		</span><span class="kwd">if</span><span class="pun">(!</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">i</span><span class="pun">].</span><span class="pln">con</span><span class="pun">)</span><span class="pln">		</span><span class="com">//i.e a </span><mark><span class="com">client</span></mark><span class="com"> has not connected to this slot</span></code></li><li class="L7"><code><span class="pln">		</span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">			</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">accept</span><span class="pun">(</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">i</span><span class="pun">]))</span></code></li><li class="L9"><code><span class="pln">			</span><span class="pun">{</span></code></li><li class="L0"><code><span class="pln">				</span><span class="com">//update </span><mark><span class="com">server</span></mark><span class="com"> status</span></code></li><li class="L1"><code><span class="pln">				</span><span class="typ">Server_Status</span><span class="pun">(</span><span class="pln">CLIENT_CON</span><span class="pun">);</span></code></li><li class="L2"><code><span class="pln">			</span><span class="pun">}</span></code></li><li class="L3"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L4"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L5"><code><span class="pun">}</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="typ">Server_Status</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> msg</span><span class="pun">)</span></code></li><li class="L8"><code><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">	</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">msg </span><span class="pun">==</span><span class="pln"> CLIENT_CON</span><span class="pun">)</span></code></li><li class="L0"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">		PR_CONS</span><span class="pun">++;</span></code></li><li class="L2"><code><span class="pln">		cout</span><span class="pun">&lt;&lt;</span><span class="str">"\nWow, a </span><mark><span class="str">client</span></mark><span class="str"> has connected"</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">msg </span><span class="pun">==</span><span class="pln"> CLIENT_DIS</span><span class="pun">)</span></code></li><li class="L5"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">		PR_CONS</span><span class="pun">--;</span></code></li><li class="L7"><code><span class="pln">		cout</span><span class="pun">&lt;&lt;</span><span class="str">"Wee, a </span><mark><span class="str">client</span></mark><span class="str"> has disconnected"</span><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L9"><code><span class="pln">	</span><span class="kwd">else</span></code></li><li class="L0"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">		</span><span class="com">//never leave out anything</span></code></li><li class="L2"><code><span class="pln">		cout</span><span class="pun">&lt;&lt;</span><span class="str">"\n&gt;&gt;&gt;&gt;&gt;&gt;We got an unknown message :"</span><span class="pun">&lt;&lt;</span><span class="pln">msg</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L4"><code><span class="pun">}</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="kwd">void</span><span class="pln"> disconnect</span><span class="pun">(</span><span class="pln">_client </span><span class="pun">*</span><span class="pln">x</span><span class="pun">)</span><span class="pln"> </span><span class="com">//this is called by the low level funtions</span></code></li><li class="L7"><code><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">	</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="pln">cs</span><span class="pun">)</span><span class="pln">closesocket</span><span class="pun">(</span><span class="pln">x</span><span class="pun">-&gt;</span><span class="pln">cs</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">	x</span><span class="pun">-&gt;</span><span class="pln">con </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">	x</span><span class="pun">-&gt;</span><span class="pln">i </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><mark><span class="lit">1</span></mark><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">	</span><span class="typ">Server_Status</span><span class="pun">(</span><span class="pln">CLIENT_DIS</span><span class="pun">);</span></code></li><li class="L2"><code><span class="pun">}</span></code></li></ol></pre> <p>That's it,now you have enough stuff to setup a <mark>server</mark> that will accept multiple connections.</p> <p><br> <mark>Chat</mark> Servers<br>
-------------<br> <mark>Chat</mark> servers are the easy to build since they have little work to do and require no protocol.<br>
The code I gave above is sufficent to build a simple one.You will just have to build recv_clients()<br>
and a chat_message(char *s).</p> <p>Now let look at what a basic <mark>chat</mark> <mark>server</mark> does.Well a <mark>client</mark> connect,nick names himself,and<br>
the types messages which are transmitted to everyone.I wont show how to handle the nick<br>
registration (you do that) but I will show you a way to respond to a command and a simple<br> <mark>chat</mark> message.</p> <p>Let's say all our commads start with a / and they will be handled <mark>server</mark> side.Ok get hold of the<br> <mark>server</mark> code I already gave and put in the <mark>server</mark> loop.You will have to define the messages,MAX_CONS<br>
and PR_CONS.(also remove the send_client() will will not need that here).</p> <p>Thse chat_message funtion just has to send a text message to all connected clients.</p> <pre snippet-index="13" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="kwd">void</span><span class="pln"> chat_message</span><span class="pun">(</span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">s</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">	</span><span class="kwd">int</span><span class="pln"> len </span><span class="pun">=</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">s</span><span class="pun">);</span></code></li><li class="L3"><code><span class="pln">	</span></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln">i</span><span class="pun">&lt;</span><span class="pln">MAX_CONS</span><span class="pun">;</span><span class="pln">i</span><span class="pun">++)</span></code></li><li class="L5"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">		</span><span class="kwd">if</span><span class="pun">(</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">i</span><span class="pun">].</span><span class="pln">con</span><span class="pun">)</span><span class="pln">		</span><span class="com">//valid slot,i.e a </span><mark><span class="com">client</span></mark><span class="com"> has parked here</span></code></li><li class="L7"><code><span class="pln">		</span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">			send</span><span class="pun">(</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">i</span><span class="pun">],</span><span class="pln">s</span><span class="pun">,</span><span class="pln">len</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L1"><code><span class="pun">}</span></code></li></ol></pre> <p>Now the recive funtion has to get a message from any <mark>client</mark> who sends a message</p> <pre snippet-index="14" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="com">#define</span><span class="pln"> BF_SZ </span><span class="lit">100</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="kwd">void</span><span class="pln"> recv_client</span><span class="pun">()</span></code></li><li class="L3"><code><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">char</span><span class="pln"> buffer</span><span class="pun">[</span><span class="pln">BF_SZ</span><span class="pun">]</span></code></li><li class="L5"><code><span class="pln">	</span></code></li><li class="L6"><code><span class="pln">	</span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln">i</span><span class="pun">&lt;</span><span class="pln">MAX_CONS</span><span class="pun">;</span><span class="pln">i</span><span class="pun">++)</span></code></li><li class="L7"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">		</span><span class="kwd">if</span><span class="pun">(</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">i</span><span class="pun">].</span><span class="pln">con</span><span class="pun">)</span><span class="pln">		</span><span class="com">//valid slot,i.e a </span><mark><span class="com">client</span></mark><span class="com"> has parked here</span></code></li><li class="L9"><code><span class="pln">		</span><span class="pun">{</span></code></li><li class="L0"><code><span class="pln">			</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">recv</span><span class="pun">(</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">i</span><span class="pun">],</span><span class="pln">buffer</span><span class="pun">,</span><span class="pln">BF_SZ</span><span class="pun">))</span></code></li><li class="L1"><code><span class="pln">			</span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">				</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">buffer</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]==</span><span class="str">'/'</span><span class="pun">)</span></code></li><li class="L3"><code><span class="pln">				</span><span class="pun">{</span><span class="pln">	</span></code></li><li class="L4"><code><span class="pln">					</span><span class="com">//respond to commands</span></code></li><li class="L5"><code><span class="pln">					</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">strcmp</span><span class="pun">(</span><span class="pln">buffer</span><span class="pun">,</span><span class="str">"/server_bang"</span><span class="pun">)==</span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L6"><code><span class="pln">					</span><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">						chat_message</span><span class="pun">(</span><span class="str">"8*8* The </span><mark><span class="str">Server</span></mark><span class="str"> Goes BANG *8*8"</span><span class="pun">);</span></code></li><li class="L8"><code><span class="pln">					</span><span class="pun">}</span></code></li><li class="L9"><code><span class="pln">				</span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">				</span><span class="kwd">else</span></code></li><li class="L1"><code><span class="pln">				</span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">					chat_message</span><span class="pun">(</span><span class="pln">buffer</span><span class="pun">);</span></code></li><li class="L3"><code><span class="pln">				</span><span class="pun">}</span></code></li><li class="L4"><code><span class="pln">			</span><span class="pun">}</span></code></li><li class="L5"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L6"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L7"><code><span class="pun">}</span></code></li></ol></pre> <p>Naturally,Now you have a <mark>chat</mark> <mark>server</mark>,but you cant say who said what.For that you will have to <br>
add a char variable to the _client struct respond to a command to assign the nick.Then add the nick<br>
to the beginig of every message and voila a better <mark>chat</mark> <mark>server</mark>.More polish would invlove alerting<br>
all the clients when a fellow connects or disconnects.(Server_Stats() can do that).No need for<br>
me to do that it's simple and you will get more satisfaction if you do it.Else it will be no more than<br>
copy paste.You now have enough potential to build your own <mark>server</mark> for any purpose.(For God's<br>
sake dont make IRC yet,just add more commands and polish and some status display funtions)</p> <pre snippet-index="15" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="pun">--------------------------------</span></code></li><li class="L1"><code><span class="pln">				     </span><span class="typ">Protocols</span></code></li><li class="L2"><code><span class="pln">				</span><span class="pun">(</span><span class="typ">Basic</span><span class="pln"> overview</span><span class="pun">)</span></code></li><li class="L3"><code><span class="pln">			</span><span class="pun">--------------------------------</span></code></li></ol></pre> <p><br> <br>
Very boring.Diplomats use it a lot.Nah computer potocols are much more interesting.It's<br>
a specified way in which a <mark>client</mark> and a <mark>server</mark> talk.</p> <pre snippet-index="16" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="typ">Eg</span><span class="pln"> of a protocol</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="kwd">struct</span><span class="pln"> chat_protocol</span></code></li><li class="L3"><code><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">int</span><span class="pln"> id</span><span class="pun">;</span></code></li><li class="L5"><code><span class="pln">	</span><span class="kwd">char</span><span class="pln"> nick</span><span class="pun">[</span><span class="lit">10</span><span class="pun">];</span></code></li><li class="L6"><code><span class="pln">	</span><span class="kwd">char</span><span class="pln"> msg</span><span class="pun">[</span><span class="lit">100</span><span class="pun">];</span></code></li><li class="L7"><code><span class="pun">};</span></code></li></ol></pre> <p>What !!! that's just a structure.Well my friend deplomats never say even a simple thing simply<br>
you know.Some times life is very simple.Now how do you use this.Simple,any file i/o.</p> <pre snippet-index="17" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="pln">send</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">,(</span><span class="kwd">char</span><span class="pun">*)&amp;</span><span class="pln">prt_buff</span><span class="pun">,</span><span class="kwd">sizeof</span><span class="pun">(</span><span class="pln">chat_protocol</span><span class="pun">),</span><span class="lit">0</span><span class="pun">);</span></code></li><li class="L1"><code><span class="pln">	recv</span><span class="pun">(</span><span class="pln">sock</span><span class="pun">,(</span><span class="kwd">char</span><span class="pun">*)&amp;</span><span class="pln">prt_buff</span><span class="pun">,</span><span class="kwd">sizeof</span><span class="pun">(</span><span class="pln">chat_protocol</span><span class="pun">),</span><span class="lit">0</span><span class="pun">);</span></code></li></ol></pre> <p><br> <br>
It's as simple as that.This was a very simplistic view.I dont really care to go into the jargon <br>
when dealing with newbies.</p> <p>Actually a protocol define how large a transmission is,what it is made up of,and where to find what.</p> <p>Eg.The first byte to the 2nd byte will contain an integer containing an id.The next 10 byte will contain<br>
the nick name.The rest will contain the message.That how a protocol would be on paper so that others<br>
can implement it in their programms which may not be in <mark>C</mark>/<mark>C</mark>++ and then they will still be able to<br>
communicate with your <mark>server</mark>.<mark>C</mark>++ make this stuff quite easy as you can see :-).</p> <p>Of course there can be sub-protocols as well.The string terminator NULL ('\0') is another protocol<br>
you could say.It tells us where the string ends.Aowsome eh ?</p> <pre snippet-index="18" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="pun">--------------------------------</span></code></li><li class="L1"><code><span class="pln">				     </span><span class="typ">Security</span></code></li><li class="L2"><code><span class="pln">				   </span><span class="pun">(</span><span class="typ">Concerns</span><span class="pun">)</span></code></li><li class="L3"><code><span class="pln">			</span><span class="pun">--------------------------------</span></code></li></ol></pre> <p>Well you know diplomats they never say anything directly and a lot of things said are not<br>
what they seem at the surface and maybe more shallow or deeper that you think.Never<br>
trust them blindly.</p> <p>Let me drive it home.Look at the chat_protocol above.Take the msg char variable.Now<br>
if you use cout&lt;&lt; it should display some text.But suppose a <mark>client</mark> has filled the entire<br>
100 bytes with  charA without a \0.What happens then.Your <mark>server</mark> will happily start reading <br>
the string, cross the limit and go into restricted parts till it hits a \0 or CRASHES !!.A simple<br>
buffer overflow exploit.</p> <p>Always be careful with read/write limits.This should be enough to get you worried so when<br>
you make your servers keep such things in mind.Always.</p> <p>[From personal experiance.When I used to work on a simple <mark>chat</mark> <mark>server</mark> I noticed that I could <br>
over write a part of memory to get past restrictions by simply setting a huge nickname.It over<br>
wrote an int which stored my current permission.The permission check funtion used to give normal<br>
permission as default.ie</p> <pre snippet-index="19" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="kwd">if</span><span class="pun">(</span><span class="pln">check</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">	perm </span><span class="pun">=</span><span class="pln"> </span><span class="lit">9</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pun">}</span></code></li><li class="L4"><code><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">check </span><span class="pun">==</span><span class="pln"> </span><span class="lit">222</span><span class="pun">)</span></code></li><li class="L5"><code><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">	perm </span><span class="pun">=</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span></code></li><li class="L7"><code><span class="pun">}</span></code></li><li class="L8"><code><span class="kwd">else</span><span class="pln"> perm </span><span class="pun">=</span><span class="pln"> normal</span><span class="pun">;</span></code></li></ol></pre> <p>As far as possible dont do that and handle only conditions which can be predicted.Everything<br>
else should generate an error message and any possible action like disconnecting the <mark>client</mark>]</p> <p>That's a wrap folks.You know have a little above the beginners level of knowledge of building<br>
servers and it various factors and concerns.</p> <p>[You should be able to find the full source of the <mark>chat</mark> <mark>server</mark> on my site,compare it with yours]</p> <pre snippet-index="20" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="typ">Name</span><span class="pun">:</span><span class="pln">	</span><span class="typ">Aaron</span><span class="pln"> M</span><span class="pun">.(</span><span class="pln">a</span><span class="pun">.</span><span class="pln">k</span><span class="pun">.</span><span class="pln">a </span><span class="typ">FireNet</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pln">E</span><span class="pun">-</span><span class="typ">Mail</span><span class="pun">:</span><span class="pln">	</span><span class="pun">[</span><span class="pln">email</span><span class="pun">]</span><span class="pln">xfirenet@hotmail</span><span class="pun">.</span><span class="pln">com</span><span class="pun">[</span><span class="str">/email]</span></code></li><li class="L2"><code><span class="str">Website:	 &lt;a href="</span><a href="http://www.xlock.ssr.be/" rel="nofollow"><span class="str">http:/</span><span class="pun">/</span><span class="pln">www</span><span class="pun">.</span><span class="pln">xlock</span><span class="pun">.</span><span class="pln">ssr</span><span class="pun">.</span><span class="pln">be</span></a><span class="str">"&gt;www.xlock.ssr.be&lt;/a&gt; </span></code></li><li class="L3"><code><span class="str">                  &lt;a href="</span><a href="http://xlock.hostcubix.com/" rel="nofollow"><span class="pln">http</span><span class="pun">:</span><span class="com">//xlock.hostcubix.com/</span></a><span class="com">"&gt;</span><a href="http://xlock.hostcubix.com/" rel="nofollow"><span class="com">http://xlock.hostcubix.com/</span></a><span class="com">&lt;/a&gt;</span></code></li></ol></pre> <p>- Burn Out /*"&gt;"£"£)£")£"$"£("£&amp;^£"</p> <p>[Exit
 notes:Well you should have got a nice overview of building servers 
quickly and in a cut-trought fasion.I will post some compleated code and
 and few notes concerning a few things which I have not really dealt 
with,and links to more resources of course]</p></div> <!-- google_ad_section_end --> <div class="clear"></div> </div> </div> <div class="adsense-body"> <div><span class="ad-line1"> <strong>Related Article:</strong> <a href="http://www.daniweb.com/software-development/cpp/threads/158218/multi-client-server">Multi Client server</a></span> </div> <div><span class="ad-line2">
								Authored by ishitasheth in the C++ forum, this related 
discussion thread currently has 1 reply and								was last posted to 3 
years ago by Rashakil Fol.
																It begins, <span class="big">“</span>Write a client-server application program to design a chatting room implementation using sockets to communicate ...<span class="big">”</span> </span></div> </div> <div class="postbit-below"> </div> </div> <div id="postbit-ad"> <div id="adsense-sidebar"><div class="post" align="center"><div class="adsense-image"><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" wmode="opaque" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0" height="250" width="300"> <param name="movie" value="http://pagead2.googlesyndication.com/pagead/imgad?id=CMfD3PbI5OzqrAEQrAIY-gEyCFHhtYtWMxrn&amp;clickTAG=http://www.googleadservices.com/pagead/aclk%3Fsa%3DL%26ai%3DBEOVPULNIUN-fMOHJigfShoD4Dtfkl4oEj6SyrFLHg_GtjQHQs-UEEAEYASCPqvUBOABQjPT1pAdg5YKAgNgOoAGR58vPA7IBD3d3dy5kYW5pd2ViLmNvbboBCjMwMHgyNTBfanPIAQTaAVlodHRwOi8vd3d3LmRhbml3ZWIuY29tL3NvZnR3YXJlLWRldmVsb3BtZW50L2NwcC90aHJlYWRzLzY4MTEvd2luc29jay1tdWx0aS1jbGllbnQtc2VydmVyc4ACAakCPuTWlYRKUz64AhjAAgXIAu_ljDCoAwHoAwXoA9sF9QMAAQDE9QMAAAAQiAYBoAYE4AaX_Iox%26num%3D1%26cid%3D5GhXaXjxs6VHk-eJ9P_mtkcM%26sig%3DAOD64_0bzF1Nt_D6gQNC6WHFRK8tZwstkg%26client%3Dca-pub-8426641637123945%26adurl%3Dhttp://pizzaonline.dominos.co.in/index.php%253Fsrc%253Dreg"><param name="quality" value="high"><param name="allowscriptaccess" value="never"><embed src="winsock-multi-client-servers_files/imgad.swf" type="application/x-shockwave-flash" wmode="opaque" allowscriptaccess="never" pluginspage="http://www.macromedia.com/go/getflashplayer" height="250" width="300"></object></div></div></div> </div> </div> </div> <div class="post-userinfo"> <a href="http://www.daniweb.com/members/7485/FireNet" class="username">FireNet</a> <div class="usertitle">
				Posting Whiz in Training
								
			</div> <div class="posts-since"><span class="posts">258 posts</span> since May 2004</div> <div class="usertip"> <div>Reputation Points: 108</div> <div>Solved Threads: 7</div> </div> </div> <div class="clear">&nbsp;</div> </div> <div id="adsense-middle"><div class="post" align="center"><div class="adsense-image"><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" wmode="opaque" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0" height="90" width="728"> <param name="movie" value="http://pagead2.googlesyndication.com/pagead/imgad?id=CICAgICQ_djFTBDYBRhaMgjPDxksZVxMjw&amp;clickTAG=http://googleads.g.doubleclick.net/aclk%3Fsa%3DL%26ai%3DBJIegTbNIUPyeJcjHigfB_IH4DY3O-PwCnZiSxTPl3-KNOsCD2wQQARgBII-q9QE4AFCQxOblBmDlgoCA2A6yAQ93d3cuZGFuaXdlYi5jb226AQk3Mjh4OTBfanPIAQTaAVlodHRwOi8vd3d3LmRhbml3ZWIuY29tL3NvZnR3YXJlLWRldmVsb3BtZW50L2NwcC90aHJlYWRzLzY4MTEvd2luc29jay1tdWx0aS1jbGllbnQtc2VydmVyc6kCN5ZrmlBEUz64AhjAAgbIAs3W9SWoAwHoAwXoA9sF9QMAAQDE9QMAAAAQoAYE4Aadz4kj%26num%3D1%26sig%3DAOD64_3MGod3vAlTT3gUUKY8xzc3wSzCKw%26client%3Dca-pub-8426641637123945%26adurl%3Dhttp://microsite.panasonic.co.in/viera/%253Futm_source%253DGoogle%2526utm_medium%253Dcpc%2526utm_content%253DGDN%2526utm_campaign%253DViera"><param name="quality" value="high"><param name="allowscriptaccess" value="never"><embed src="winsock-multi-client-servers_files/imgad_002.swf" type="application/x-shockwave-flash" wmode="opaque" allowscriptaccess="never" pluginspage="http://www.macromedia.com/go/getflashplayer" height="90" width="728"></object></div></div></div> <div class="post post-op" id="post33092" data-postid="33092"> <div class="postbit-message"> <div class="push-postbit"> <div> <div class="postbit-header"> <div class="titlebar"> <div class="left"> <span class="timestamp"><a href="http://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers#post33092">8 Years Ago</a></span> </div> <div class="votes"> <div class="vote">0</div> </div> <div class="clear"></div> </div> </div> <div class="postbit-body"> <div class="comments"></div> <div class="message"> <!-- google_ad_section_start --> <div class="parsed-message"><p>Here is the <mark>server</mark> made by Aaron Anderson (to him is this tutorial dedicated) exactly how it was sent to me.Compare it with your code.</p> <p>I would like to add the Anderson has an excellent coding style and great <br>
potential as a coder.He is dedicated to his work and very through.I wish<br>
him very best.This <mark>server</mark> is done very well and is no copy paste job.</p> <pre snippet-index="21" class="prettyprint linenums"><ol class="linenums"><li class="L0"><code><span class="com">/*</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="com">// COMMENTS //</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="com">	Author	:	xmen90s -&gt; based on the tutorial of Aaron aka FireNet</span></code></li><li class="L5"><code><span class="com">				[email]xmen90s@yahoo.com[/email]</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="com">	Date	:	June 10th of 2004</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="com">	Purpose	:	This </span><mark><span class="com">server</span></mark><span class="com"> receives input from multiple clients and keeps</span></code></li><li class="L0"><code><span class="com">				a RAM database of a few pieces of information like screen</span></code></li><li class="L1"><code><span class="com">				name, character model, and position</span></code></li><li class="L2"><code><span class="com">				The </span><mark><span class="com">server</span></mark><span class="com"> then will echo back information to all clients</span></code></li><li class="L3"><code><span class="com">				instructing them on where to move actors</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="com">				Essentially I'm working on rebuilding the multiplayer system</span></code></li><li class="L6"><code><span class="com">				of a game called Dungeon Siege from ground up.</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="com">	I want to put a special thanks out to Aaron aka FireNet for writing</span></code></li><li class="L9"><code><span class="com">	the most excellent tutorial I have ever read.  I went from knowing</span></code></li><li class="L0"><code><span class="com">	cin and cout to writing a full non-blocking </span><mark><span class="com">multi</span></mark><span class="com">-</span><mark><span class="com">client</span></mark><span class="com"> echo </span><mark><span class="com">server</span></mark></code></li><li class="L1"><code><span class="com">	in just one and a half weeks because of him.</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="com">// LINKS //</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="com">	Remember to link to : wsock32.lib</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="com">*/</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="com">// INCLUDE FILES //</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;fstream.h&gt;</span></code></li><li class="L2"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;iostream.h&gt;</span></code></li><li class="L3"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;stdio.h&gt;</span></code></li><li class="L4"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;string.h&gt;</span></code></li><li class="L5"><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;winsock.h&gt;</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="com">// DEFINITIONS //</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="com">#define</span><span class="pln">		PORT </span><span class="lit">4000</span><span class="pln">		</span><span class="com">// Define the port to connect to</span></code></li><li class="L0"><code><span class="com">#define</span><span class="pln">		MAX_CLIENTS </span><span class="lit">10</span><span class="pln">	</span><span class="com">// Define the maximum number of clients we can receive</span></code></li><li class="L1"><code><span class="com">#define</span><span class="pln">		BUFFER_SIZE </span><span class="lit">256</span><span class="pln"> </span><span class="com">// Define the buffer size of the messages</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="com">// STRUCTURES //</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="kwd">struct</span><span class="pln"> _client</span></code></li><li class="L6"><code><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">	</span><span class="kwd">bool</span><span class="pln">		connected</span><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">	sockaddr_in	address</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">	SOCKET		socket</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">	fd_set		socket_data</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">	</span><span class="kwd">int</span><span class="pln">			address_length</span><span class="pun">;</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">	</span><span class="kwd">char</span><span class="pln">		template_name</span><span class="pun">[</span><span class="lit">15</span><span class="pun">];</span></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">char</span><span class="pln">		screen_name</span><span class="pun">[</span><span class="lit">15</span><span class="pun">];</span></code></li><li class="L5"><code><span class="pln">	</span><span class="kwd">char</span><span class="pln">		siegepos</span><span class="pun">[</span><span class="lit">45</span><span class="pun">];</span></code></li><li class="L6"><code><span class="pun">};</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="com">// GLOBAL VARIABLES //</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">sockaddr_in	server_address</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">sockaddr	server_socket_address</span><span class="pun">;</span></code></li><li class="L2"><code><span class="pln">SOCKET		server_socket</span><span class="pun">;</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">_client		</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">MAX_CLIENTS</span><span class="pun">];</span></code></li><li class="L5"><code><span class="kwd">int</span><span class="pln">			clients_connected </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="com">// FUNCTION DECLARATIONS //</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="kwd">bool</span><span class="pln">	accept_client </span><span class="pun">(</span><span class="pln"> _client </span><span class="pun">*</span><span class="pln">current_client </span><span class="pun">);</span></code></li><li class="L0"><code><span class="kwd">int</span><span class="pln">		accept_connections </span><span class="pun">();</span></code></li><li class="L1"><code><span class="kwd">int</span><span class="pln">		disconnect_client </span><span class="pun">(</span><span class="pln"> _client </span><span class="pun">*</span><span class="pln">current_client </span><span class="pun">);</span></code></li><li class="L2"><code><span class="kwd">void</span><span class="pln">	echo_message </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">message </span><span class="pun">);</span></code></li><li class="L3"><code><span class="kwd">void</span><span class="pln">	end_server</span><span class="pun">();</span></code></li><li class="L4"><code><span class="kwd">void</span><span class="pln">	midcopy </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> input</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> output</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> start_pos</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> stop_pos </span><span class="pun">);</span></code></li><li class="L5"><code><span class="kwd">int</span><span class="pln">		receive_client </span><span class="pun">(</span><span class="pln"> _client </span><span class="pun">*</span><span class="pln">current_client</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">buffer</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> size </span><span class="pun">);</span></code></li><li class="L6"><code><span class="kwd">void</span><span class="pln">	receive_data</span><span class="pun">();</span></code></li><li class="L7"><code><span class="kwd">int</span><span class="pln">		send_data </span><span class="pun">(</span><span class="pln"> _client </span><span class="pun">*</span><span class="pln">current_client</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">buffer</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> size </span><span class="pun">);</span></code></li><li class="L8"><code><span class="kwd">void</span><span class="pln">	start_server</span><span class="pun">();</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="com">// FUNCTION DEFINITIONS //</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="kwd">bool</span><span class="pln"> accept_client </span><span class="pun">(</span><span class="pln"> _client </span><span class="pun">*</span><span class="pln">current_client </span><span class="pun">)</span></code></li><li class="L3"><code><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">	</span><span class="com">// Accept incoming connections</span></code></li><li class="L5"><code><span class="pln">	current_client</span><span class="pun">-&gt;</span><span class="pln">address_length </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">sizeof</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> sockaddr </span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">	current_client</span><span class="pun">-&gt;</span><span class="pln">socket </span><span class="pun">=</span><span class="pln"> accept </span><span class="pun">(</span><span class="pln"> server_socket</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> sockaddr </span><span class="pun">*</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">current_client</span><span class="pun">-&gt;</span><span class="pln">address</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">current_client</span><span class="pun">-&gt;</span><span class="pln">address_length </span><span class="pun">);</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">socket </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L9"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L0"><code><span class="pln">		</span><span class="com">// No data in socket</span></code></li><li class="L1"><code><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> FALSE </span><span class="pun">);</span></code></li><li class="L2"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L3"><code><span class="pln">	</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">socket </span><span class="pun">==</span><span class="pln"> SOCKET_ERROR </span><span class="pun">)</span></code></li><li class="L4"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">		</span><span class="com">// Socket error</span></code></li><li class="L6"><code><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> FALSE </span><span class="pun">);</span></code></li><li class="L7"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L8"><code><span class="pln">	</span><span class="kwd">else</span></code></li><li class="L9"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L0"><code><span class="pln">		</span><span class="com">// Occupy the </span><mark><span class="com">client</span></mark><span class="com"> slot</span></code></li><li class="L1"><code><span class="pln">		current_client</span><span class="pun">-&gt;</span><span class="pln">connected </span><span class="pun">=</span><span class="pln"> TRUE</span><span class="pun">;</span></code></li><li class="L2"><code><span class="pln">		FD_ZERO </span><span class="pun">(</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">current_client</span><span class="pun">-&gt;</span><span class="pln">socket_data </span><span class="pun">);</span></code></li><li class="L3"><code><span class="pln">		FD_SET </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">socket</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">current_client</span><span class="pun">-&gt;</span><span class="pln">socket_data </span><span class="pun">);</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> TRUE </span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> FALSE </span><span class="pun">);</span></code></li><li class="L9"><code><span class="pun">}</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="kwd">int</span><span class="pln"> accept_connections</span><span class="pun">()</span></code></li><li class="L2"><code><span class="pun">{</span></code></li><li class="L3"><code><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> clients_connected </span><span class="pun">&lt;</span><span class="pln"> MAX_CLIENTS </span><span class="pun">)</span></code></li><li class="L4"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">		</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> MAX_CLIENTS</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L6"><code><span class="pln">		</span><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">			</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="pun">!</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">].</span><span class="pln">connected </span><span class="pun">)</span></code></li><li class="L8"><code><span class="pln">			</span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">				</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> accept_client </span><span class="pun">(</span><span class="pln"> </span><span class="pun">&amp;</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L0"><code><span class="pln">				</span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">					</span><span class="com">// Increment the </span><mark><span class="com">client</span></mark><span class="com"> count</span></code></li><li class="L2"><code><span class="pln">					clients_connected</span><span class="pun">++;</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">					</span><span class="com">// Grab the ip address of the </span><mark><span class="com">client</span></mark><span class="com"> ... just for fun</span></code></li><li class="L5"><code><span class="pln">					</span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">client_ip_address </span><span class="pun">=</span><span class="pln"> inet_ntoa </span><span class="pun">(</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">].</span><span class="pln">address</span><span class="pun">.</span><span class="pln">sin_addr </span><span class="pun">);</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">					</span><span class="com">// Output connection</span></code></li><li class="L8"><code><span class="pln">					cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"ACCEPTING </span><mark><span class="str">CLIENT</span></mark><span class="str"> to array position ["</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> j </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"] with IP ADDRESS "</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> client_ip_address </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">				</span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">			</span><span class="pun">}</span></code></li><li class="L1"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L2"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><mark><span class="lit">1</span></mark><span class="pln"> </span><span class="pun">);</span></code></li><li class="L5"><code><span class="pun">}</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="kwd">int</span><span class="pln"> disconnect_client </span><span class="pun">(</span><span class="pln"> _client </span><span class="pun">*</span><span class="pln">current_client </span><span class="pun">)</span></code></li><li class="L8"><code><span class="pun">{</span><span class="pln"> </span><span class="com">// Disconnect a </span><mark><span class="com">client</span></mark></code></li><li class="L9"><code><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">connected </span><span class="pun">==</span><span class="pln"> TRUE </span><span class="pun">)</span></code></li><li class="L0"><code><span class="pln">	</span><span class="pun">{</span><span class="pln"> </span><span class="com">// Close the socket for the </span><mark><span class="com">client</span></mark></code></li><li class="L1"><code><span class="pln">		closesocket </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">socket </span><span class="pun">);</span></code></li><li class="L2"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">	</span><span class="com">// Set the new </span><mark><span class="com">client</span></mark><span class="com"> state</span></code></li><li class="L5"><code><span class="pln">	current_client</span><span class="pun">-&gt;</span><span class="pln">connected </span><span class="pun">=</span><span class="pln"> FALSE</span><span class="pun">;</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">	</span><span class="com">// Clear the address length</span></code></li><li class="L8"><code><span class="pln">	current_client</span><span class="pun">-&gt;</span><span class="pln">address_length </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><mark><span class="lit">1</span></mark><span class="pun">;</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">	</span><span class="com">// Decrement the current number of connected clients</span></code></li><li class="L1"><code><span class="pln">	clients_connected</span><span class="pun">--;</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">	</span><span class="com">// Declare a variable to store the disconnect message into</span></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">char</span><span class="pln"> raw_data</span><span class="pun">[</span><span class="pln">BUFFER_SIZE</span><span class="pun">];</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">	</span><span class="com">// Parse in the </span><mark><span class="com">client</span></mark><span class="com"> data to send</span></code></li><li class="L7"><code><span class="pln">	sprintf </span><span class="pun">(</span><span class="pln"> raw_data</span><span class="pun">,</span><span class="pln"> </span><span class="str">"~4 %s"</span><span class="pun">,</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">screen_name </span><span class="pun">);</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">	</span><span class="com">// Echo out the disconnect message so all clients drop this </span><mark><span class="com">client</span></mark></code></li><li class="L0"><code><span class="pln">	echo_message </span><span class="pun">(</span><span class="pln"> raw_data </span><span class="pun">);</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">	cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"Disconnecting </span><mark><span class="str">client</span></mark><span class="str">[]"</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><mark><span class="lit">1</span></mark><span class="pln"> </span><span class="pun">);</span></code></li><li class="L5"><code><span class="pun">}</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="kwd">void</span><span class="pln"> echo_message </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">message </span><span class="pun">)</span></code></li><li class="L8"><code><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">	</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> MAX_CLIENTS</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L0"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">		</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">].</span><span class="pln">connected </span><span class="pun">)</span></code></li><li class="L2"><code><span class="pln">		</span><span class="pun">{</span><span class="pln"> </span><span class="com">// Echo the message to all clients</span></code></li><li class="L3"><code><span class="pln">			send_data </span><span class="pun">(</span><span class="pln"> </span><span class="pun">&amp;</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">],</span><span class="pln"> message</span><span class="pun">,</span><span class="pln"> BUFFER_SIZE </span><span class="pun">);</span></code></li><li class="L4"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L5"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L6"><code><span class="pun">}</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="kwd">void</span><span class="pln"> end_server</span><span class="pun">()</span></code></li><li class="L9"><code><span class="pun">{</span><span class="pln"> </span><span class="com">// Shut down the </span><mark><span class="com">server</span></mark><span class="com"> by disconnecting all clients and clearing winsock</span></code></li><li class="L0"><code><span class="pln">	</span><span class="com">// Disconnect all clients</span></code></li><li class="L1"><code><span class="pln">	</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> MAX_CLIENTS</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">++;)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> disconnect_client </span><span class="pun">(</span><span class="pln"> </span><span class="pun">&amp;</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">	</span><span class="com">// Close the listening socket for the </span><mark><span class="com">server</span></mark></code></li><li class="L4"><code><span class="pln">	closesocket </span><span class="pun">(</span><span class="pln"> server_socket </span><span class="pun">);</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">	</span><span class="com">// Clean up winsock</span></code></li><li class="L7"><code><span class="pln">	</span><span class="typ">WSACleanup</span><span class="pun">();</span></code></li><li class="L8"><code><span class="pun">}</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="kwd">void</span><span class="pln"> midcopy </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> input</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> output</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> start_pos</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> stop_pos </span><span class="pun">)</span></code></li><li class="L1"><code><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">	</span><span class="kwd">int</span><span class="pln"> index </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> start_pos</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> stop_pos</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L5"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">		output</span><span class="pun">[</span><span class="pln">index</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> input</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span></code></li><li class="L7"><code><span class="pln">		index</span><span class="pun">++;</span></code></li><li class="L8"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">	output</span><span class="pun">[</span><span class="pln">index</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pun">}</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="kwd">int</span><span class="pln"> receive_client </span><span class="pun">(</span><span class="pln"> _client </span><span class="pun">*</span><span class="pln">current_client</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">buffer</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> size </span><span class="pun">)</span></code></li><li class="L4"><code><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> FD_ISSET </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">socket</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">current_client</span><span class="pun">-&gt;</span><span class="pln">socket_data </span><span class="pun">)</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L6"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">		</span><span class="com">// Store the return data of what we have sent</span></code></li><li class="L8"><code><span class="pln">		current_client</span><span class="pun">-&gt;</span><span class="pln">address_length </span><span class="pun">=</span><span class="pln"> recv </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">socket</span><span class="pun">,</span><span class="pln"> buffer</span><span class="pun">,</span><span class="pln"> size</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">);</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">		</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">address_length </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L1"><code><span class="pln">		</span><span class="pun">{</span><span class="pln"> </span><span class="com">// Data error on </span><mark><span class="com">client</span></mark></code></li><li class="L2"><code><span class="pln">			disconnect_client </span><span class="pun">(</span><span class="pln"> current_client </span><span class="pun">);</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">			</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> FALSE </span><span class="pun">);</span></code></li><li class="L5"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> TRUE </span><span class="pun">);</span></code></li><li class="L8"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> FALSE </span><span class="pun">);</span></code></li><li class="L1"><code><span class="pun">}</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="kwd">void</span><span class="pln"> receive_data</span><span class="pun">()</span></code></li><li class="L4"><code><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">	</span><span class="kwd">char</span><span class="pln"> buffer</span><span class="pun">[</span><span class="pln">BUFFER_SIZE</span><span class="pun">];</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">	</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> MAX_CLIENTS</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L8"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">		</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">].</span><span class="pln">connected </span><span class="pun">)</span></code></li><li class="L0"><code><span class="pln">		</span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">			</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> receive_client </span><span class="pun">(</span><span class="pln"> </span><span class="pun">&amp;</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">],</span><span class="pln"> buffer</span><span class="pun">,</span><span class="pln"> BUFFER_SIZE </span><span class="pun">)</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L2"><code><span class="pln">			</span><span class="pun">{</span></code></li><li class="L3"><code><span class="pln">				</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> buffer</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'~'</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L4"><code><span class="pln">				</span><span class="pun">{</span><span class="pln"> </span><span class="com">// All data should be buffered by a '~' just because</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">					</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> buffer</span><span class="pun">[</span><mark><span class="lit">1</span></mark><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'</span><mark><span class="str">1</span></mark><span class="str">'</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="com">// Add </span><mark><span class="com">Client</span></mark><span class="com"> Command</span></code></li><li class="L7"><code><span class="pln">					</span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">						</span><span class="com">// Declare the buffer to store new </span><mark><span class="com">client</span></mark><span class="com"> information into</span></code></li><li class="L9"><code><span class="pln">						</span><span class="kwd">char</span><span class="pln"> raw_data</span><span class="pun">[</span><span class="pln">BUFFER_SIZE</span><span class="pun">];</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">						</span><span class="com">// Parse out the 'Add </span><mark><span class="com">Client</span></mark><span class="com">' command</span></code></li><li class="L2"><code><span class="pln">						midcopy </span><span class="pun">(</span><span class="pln"> buffer</span><span class="pun">,</span><span class="pln"> raw_data</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> strlen </span><span class="pun">(</span><span class="pln"> buffer </span><span class="pun">)</span><span class="pln"> </span><span class="pun">);</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">						</span><span class="com">// Store the </span><mark><span class="com">client</span></mark><span class="com"> information into our RAM </span><mark><span class="com">client</span></mark><span class="com"> database</span></code></li><li class="L5"><code><span class="pln">						sscanf </span><span class="pun">(</span><span class="pln"> raw_data</span><span class="pun">,</span><span class="pln"> </span><span class="str">"%s %s %s"</span><span class="pun">,</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">].</span><span class="pln">template_name</span><span class="pun">,</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">].</span><span class="pln">screen_name</span><span class="pun">,</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">].</span><span class="pln">siegepos </span><span class="pun">);</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">						</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> k </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> k </span><span class="pun">&lt;</span><span class="pln"> MAX_CLIENTS</span><span class="pun">;</span><span class="pln"> k</span><span class="pun">++</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L8"><code><span class="pln">						</span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">							</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">k</span><span class="pun">].</span><span class="pln">connected </span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> j </span><span class="pun">!=</span><span class="pln"> k </span><span class="pun">)</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L0"><code><span class="pln">							</span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">								</span><span class="com">// Parse in the </span><mark><span class="com">client</span></mark><span class="com"> data to send</span></code></li><li class="L2"><code><span class="pln">								sprintf </span><span class="pun">(</span><span class="pln"> raw_data</span><span class="pun">,</span><span class="pln"> </span><span class="str">"~</span><mark><span class="str">1</span></mark><span class="str"> %s %s %s"</span><span class="pun">,</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">k</span><span class="pun">].</span><span class="pln">template_name</span><span class="pun">,</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">k</span><span class="pun">].</span><span class="pln">screen_name</span><span class="pun">,</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">k</span><span class="pun">].</span><span class="pln">siegepos </span><span class="pun">);</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">								</span><span class="com">// Send the </span><mark><span class="com">client</span></mark><span class="com"> data</span></code></li><li class="L5"><code><span class="pln">								send_data </span><span class="pun">(</span><span class="pln"> </span><span class="pun">&amp;</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">],</span><span class="pln"> raw_data</span><span class="pun">,</span><span class="pln"> BUFFER_SIZE </span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">							</span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">						</span><span class="pun">}</span></code></li><li class="L8"><code><span class="pln">					</span><span class="pun">}</span></code></li><li class="L9"><code><span class="pln">					</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> buffer</span><span class="pun">[</span><mark><span class="lit">1</span></mark><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'2'</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="com">// Move </span><mark><span class="com">Client</span></mark><span class="com"> Command</span></code></li><li class="L0"><code><span class="pln">					</span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">						</span><span class="com">// Declare the buffer to store new </span><mark><span class="com">client</span></mark><span class="com"> information into</span></code></li><li class="L2"><code><span class="pln">						</span><span class="kwd">char</span><span class="pln"> raw_data</span><span class="pun">[</span><span class="pln">BUFFER_SIZE</span><span class="pun">];</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">						</span><span class="com">// Parse out the 'Move </span><mark><span class="com">Client</span></mark><span class="com">' command</span></code></li><li class="L5"><code><span class="pln">						midcopy </span><span class="pun">(</span><span class="pln"> buffer</span><span class="pun">,</span><span class="pln"> raw_data</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> strlen </span><span class="pun">(</span><span class="pln"> buffer </span><span class="pun">)</span><span class="pln"> </span><span class="pun">);</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">						</span><span class="com">// Update the </span><mark><span class="com">client</span></mark><span class="com"> information into our RAM </span><mark><span class="com">client</span></mark><span class="com"> database</span></code></li><li class="L8"><code><span class="pln">						sscanf </span><span class="pun">(</span><span class="pln"> raw_data</span><span class="pun">,</span><span class="pln"> </span><span class="str">"%s %s"</span><span class="pun">,</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">].</span><span class="pln">screen_name</span><span class="pun">,</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">].</span><span class="pln">siegepos </span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">					</span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">					</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> buffer</span><span class="pun">[</span><mark><span class="lit">1</span></mark><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'3'</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="com">// </span><mark><span class="com">Chat</span></mark><span class="com"> </span><mark><span class="com">Client</span></mark><span class="com"> Command</span></code></li><li class="L1"><code><span class="pln">					</span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">						</span><span class="com">// ECHO THE MESSAGE BACK TO ALL CLIENTS</span></code></li><li class="L3"><code><span class="pln">					</span><span class="pun">}</span></code></li><li class="L4"><code><span class="pln">					</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> buffer</span><span class="pun">[</span><mark><span class="lit">1</span></mark><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'4'</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="com">// Remove </span><mark><span class="com">Client</span></mark><span class="com"> Command</span></code></li><li class="L5"><code><span class="pln">					</span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">						</span><span class="com">// Disconnect the current </span><mark><span class="com">client</span></mark></code></li><li class="L7"><code><span class="pln">						disconnect_client </span><span class="pun">(</span><span class="pln"> </span><span class="pun">&amp;</span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">);</span></code></li><li class="L8"><code><span class="pln">					</span><span class="pun">}</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">					</span><span class="com">// Display all data received</span></code></li><li class="L1"><code><span class="pln">					</span><span class="com">// cout &lt;&lt; buffer &lt;&lt; endl;</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">					</span><span class="com">// Echo the message to the other clients</span></code></li><li class="L4"><code><span class="pln">					echo_message </span><span class="pun">(</span><span class="pln"> buffer </span><span class="pun">);</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">					</span><span class="com">// Clear the buffer</span></code></li><li class="L7"><code><span class="pln">					buffer</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">'/0'</span><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">				</span><span class="pun">}</span></code></li><li class="L9"><code><span class="pln">			</span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">		</span><span class="pun">}</span></code></li><li class="L1"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L2"><code><span class="pun">}</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="kwd">int</span><span class="pln"> send_data </span><span class="pun">(</span><span class="pln"> _client </span><span class="pun">*</span><span class="pln">current_client</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">buffer</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> size </span><span class="pun">)</span></code></li><li class="L5"><code><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">	</span><span class="com">// Store the return information about the sending</span></code></li><li class="L7"><code><span class="pln">	current_client</span><span class="pun">-&gt;</span><span class="pln">address_length </span><span class="pun">=</span><span class="pln"> send </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">socket</span><span class="pun">,</span><span class="pln"> buffer</span><span class="pun">,</span><span class="pln"> size</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">);</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">address_length </span><span class="pun">==</span><span class="pln"> SOCKET_ERROR </span><span class="pun">)</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> current_client</span><span class="pun">-&gt;</span><span class="pln">address_length </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L0"><code><span class="pln">	</span><span class="pun">{</span><span class="pln"> </span><span class="com">// Check for errors while sending</span></code></li><li class="L1"><code><span class="pln">		disconnect_client </span><span class="pun">(</span><span class="pln"> current_client </span><span class="pun">);</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> FALSE </span><span class="pun">);</span></code></li><li class="L4"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L5"><code><span class="pln">	</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> TRUE </span><span class="pun">);</span></code></li><li class="L6"><code><span class="pun">}</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="kwd">void</span><span class="pln"> start_server</span><span class="pun">()</span></code></li><li class="L9"><code><span class="pun">{</span><span class="pln"> </span><span class="com">// Initialize the </span><mark><span class="com">server</span></mark><span class="com"> and start listening for clients</span></code></li><li class="L0"><code><span class="pln">	</span><span class="com">// LOCAL VARIABLES //</span></code></li><li class="L1"><code><span class="pln">	WSADATA wsaData</span><span class="pun">;</span></code></li><li class="L2"><code><span class="pln">	</span><span class="kwd">int</span><span class="pln"> res</span><span class="pun">,</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><mark><span class="lit">1</span></mark><span class="pun">;</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">	</span><span class="com">// Set up the address structure</span></code></li><li class="L5"><code><span class="pln">	server_address</span><span class="pun">.</span><span class="pln">sin_family </span><span class="pun">=</span><span class="pln"> AF_INET</span><span class="pun">;</span></code></li><li class="L6"><code><span class="pln">	server_address</span><span class="pun">.</span><span class="pln">sin_addr</span><span class="pun">.</span><span class="pln">s_addr </span><span class="pun">=</span><span class="pln"> INADDR_ANY</span><span class="pun">;</span></code></li><li class="L7"><code><span class="pln">	server_address</span><span class="pun">.</span><span class="pln">sin_port </span><span class="pun">=</span><span class="pln"> htons </span><span class="pun">(</span><span class="pln"> PORT</span><span class="pun">);</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">	</span><span class="com">// IM GUESSING : Copy over some addresses, conversions of some sort ?</span></code></li><li class="L0"><code><span class="pln">	memcpy </span><span class="pun">(</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">server_socket_address</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">server_address</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">sizeof</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> SOCKADDR_IN </span><span class="pun">)</span><span class="pln"> </span><span class="pun">);</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">	res </span><span class="pun">=</span><span class="pln"> </span><span class="typ">WSAStartup</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> MAKEWORD </span><span class="pun">(</span><span class="pln"> </span><mark><span class="lit">1</span></mark><span class="pun">,</span><span class="pln"> </span><mark><span class="lit">1</span></mark><span class="pln"> </span><span class="pun">),</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">wsaData </span><span class="pun">);</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">	</span><span class="com">// Start winsock</span></code></li><li class="L5"><code><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> res </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span></code></li><li class="L6"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">		cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"WSADATA ERROR : Error while attempting to initialize winsock."</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">	</span><span class="com">// Create a listening socket for the </span><mark><span class="com">server</span></mark></code></li><li class="L1"><code><span class="pln">	server_socket </span><span class="pun">=</span><span class="pln"> socket </span><span class="pun">(</span><span class="pln"> AF_INET</span><span class="pun">,</span><span class="pln"> SOCK_STREAM</span><span class="pun">,</span><span class="pln"> IPPROTO_TCP </span><span class="pun">);</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> server_socket </span><span class="pun">==</span><span class="pln"> INVALID_SOCKET </span><span class="pun">)</span></code></li><li class="L4"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">		cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"SOCKET ERROR : Invalid socket."</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span></code></li><li class="L6"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">	</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> server_socket </span><span class="pun">==</span><span class="pln"> SOCKET_ERROR </span><span class="pun">)</span></code></li><li class="L8"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">		cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"SOCKET ERROR : Socket error."</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L1"><code><span class="pln">	</span><span class="kwd">else</span></code></li><li class="L2"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L3"><code><span class="pln">		cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"SOCKET ESTABLISHED"</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span></code></li><li class="L4"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">	</span><span class="com">// Sets the option to re-use the address the entire run of the </span><mark><span class="com">program</span></mark></code></li><li class="L7"><code><span class="pln">	setsockopt </span><span class="pun">(</span><span class="pln"> server_socket</span><span class="pun">,</span><span class="pln"> SOL_SOCKET</span><span class="pun">,</span><span class="pln"> SO_REUSEADDR</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">i</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">sizeof</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> i </span><span class="pun">)</span><span class="pln"> </span><span class="pun">);</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">	</span><span class="com">// Bind the socket to the address</span></code></li><li class="L0"><code><span class="pln">	res </span><span class="pun">=</span><span class="pln"> bind </span><span class="pun">(</span><span class="pln"> server_socket</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">server_socket_address</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">sizeof</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> server_socket_address </span><span class="pun">)</span><span class="pln"> </span><span class="pun">);</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">	cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"Binding socket:"</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> res </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> res </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">)</span></code></li><li class="L5"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">		cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"BINDING ERROR : Failed to bind socket to address."</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span></code></li><li class="L7"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L8"><code><span class="pln">	</span><span class="kwd">else</span></code></li><li class="L9"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L0"><code><span class="pln">		cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"Socket Bound to port : "</span><span class="pun">&lt;&lt;</span><span class="pln"> PORT </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">	</span><span class="com">// Start listening for connection requests</span></code></li><li class="L4"><code><span class="pln">	res </span><span class="pun">=</span><span class="pln"> listen </span><span class="pun">(</span><span class="pln"> server_socket</span><span class="pun">,</span><span class="pln"> </span><span class="lit">8</span><span class="pln"> </span><span class="pun">);</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">	</span><span class="com">// This makes the </span><mark><span class="com">server</span></mark><span class="com"> non blocking, hence it won't wait for a response</span></code></li><li class="L7"><code><span class="pln">	</span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">long</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> </span><mark><span class="lit">1</span></mark><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">	ioctlsocket </span><span class="pun">(</span><span class="pln"> server_socket</span><span class="pun">,</span><span class="pln"> FIONBIO</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">b </span><span class="pun">);</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">	</span><span class="com">// Clear all clients state</span></code></li><li class="L1"><code><span class="pln">	</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> MAX_CLIENTS</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><mark><span class="pln">client</span></mark><span class="pun">[</span><span class="pln">j</span><span class="pun">].</span><span class="pln">connected </span><span class="pun">=</span><span class="pln"> FALSE</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></code></li><li class="L2"><code><span class="pun">}</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="com">////////////////////////////////////////////////////////////////////////////</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="com">////////////////////////////////////////////////////////////////////////////</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="com">// MAIN FUNCTION //</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="kwd">int</span><span class="pln"> main</span><span class="pun">()</span></code></li><li class="L1"><code><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">	cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"\txmen90s Non-Blocking </span><mark><span class="str">Multi</span></mark><span class="str">-</span><mark><span class="str">Client</span></mark><span class="str"> Echo </span><mark><span class="str">Server</span></mark><span class="str"> for Dungeon Siege\n"</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">	</span><span class="com">// Initialize winsock and start listening</span></code></li><li class="L5"><code><span class="pln">	start_server</span><span class="pun">();</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">	</span><span class="com">// Loop forever</span></code></li><li class="L8"><code><span class="pln">	</span><span class="kwd">bool</span><span class="pln"> looping </span><span class="pun">=</span><span class="pln"> TRUE</span><span class="pun">;</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">	</span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> looping </span><span class="pun">)</span></code></li><li class="L1"><code><span class="pln">	</span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">		</span><span class="com">// Accept all incoming </span><mark><span class="com">client</span></mark><span class="com"> connections</span></code></li><li class="L3"><code><span class="pln">		accept_connections</span><span class="pun">();</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">		</span><span class="com">// Receive all data from clients</span></code></li><li class="L6"><code><span class="pln">		receive_data</span><span class="pun">();</span></code></li><li class="L7"><code><span class="pln">	</span><span class="pun">}</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">	</span><span class="com">// Shut down winsock</span></code></li><li class="L0"><code><span class="pln">	end_server</span><span class="pun">();</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pun">}</span></code></li></ol></pre></div> <!-- google_ad_section_end --> <div class="clear"></div> </div> </div> <div class="postbit-below"> </div> </div> </div> </div> <div class="post-userinfo"> <a href="http://www.daniweb.com/members/7485/FireNet" class="username">FireNet</a> <div class="usertitle">
				Posting Whiz in Training
								
			</div> <div class="posts-since"><span class="posts">258 posts</span> since May 2004</div> <div class="usertip"> <div>Reputation Points: 108</div> <div>Solved Threads: 7</div> </div> </div> <div class="clear">&nbsp;</div> </div><div class="post" id="post899387" data-postid="899387"> <div class="postbit-message"> <div class="push-postbit"> <div> <div class="postbit-header"> <div class="titlebar"> <div class="left"> <span class="timestamp"><a href="http://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers#post899387">3 Years Ago</a></span> </div> <div class="votes"> <div class="vote">0</div> </div> <div class="clear"></div> </div> </div> <div class="postbit-body"> <div class="comments"></div> <div class="message"> <!-- google_ad_section_start --> <div class="parsed-message"><p>You #include  twice. Anyway, besides that little error, this is <strong>just</strong> the thing I have been looking for. Thanks, mate!</p></div> <!-- google_ad_section_end --> <div class="clear"></div> </div> </div> <div class="postbit-below"> </div> </div> </div> </div> <div class="post-userinfo"> <a href="http://www.daniweb.com/members/480100/FyerEgg" class="username">FyerEgg</a> <div class="usertitle">
				Newbie Poster
								
			</div> <div class="posts-since"><span class="posts">5 posts</span> since Jan 2009</div> <div class="usertip"> <div>Reputation Points: 10</div> <div>Solved Threads: 0</div> </div> </div> <div class="clear">&nbsp;</div> </div><div class="post" id="post931220" data-postid="931220"> <div class="postbit-message"> <div class="push-postbit"> <div> <div class="postbit-header"> <div class="titlebar"> <div class="left"> <span class="timestamp"><a href="http://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers#post931220">3 Years Ago</a></span> </div> <div class="votes"> <div class="vote">0</div> </div> <div class="clear"></div> </div> </div> <div class="postbit-body"> <div class="comments"></div> <div class="message"> <!-- google_ad_section_start --> <div class="parsed-message"><p>Hello,</p> <p>I
 tried to use that code, written by FireNet and mr Anderson. Actually I 
am studiying socket networking for a while now. I allredy wrote a 
working default (blocking) <mark>server</mark> and <mark>client</mark>. </p> <p>The problem is, that I cannot connect to that (non-blocking) <mark>server</mark> with echo <mark>client</mark>, also written in previous post by mr. Anderson.</p> <p>The <mark>client</mark> always prints "SERVERUNAVALILIBLEEXIT SIGNAL: 999" which probbably means, that <mark>client</mark> connect function call returns -<mark>1</mark>.</p> <p>If I watch <mark>server</mark> behavior, and it doesnt write anything. So it looks like, the <mark>server</mark> doesn't get any connecting <mark>client</mark> from network. I'd be really glad when somebody could help me by that problem. </p> <p>I work in Vista, and tried allredy in localhost mode (<mark>server</mark> and <mark>client</mark> on same computer), than I tried also to have <mark>server</mark> on other computer in LAN (and I changed <mark>server</mark> IP address in <mark>client</mark>)
 and still nothing works. I read about function accept, but really don't
 know how to use it and as written in previous posts, the code should 
work such, as it is written allredy.</p> <p>Many thanks for help,</p> <p>Domen Zupančič</p></div> <!-- google_ad_section_end --> <div class="clear"></div> </div> </div> <div id="adsense-bottom"></div> <div class="postbit-below"> </div> </div> </div> </div> <div class="post-userinfo"> <a href="http://www.daniweb.com/members/577651/domenzup" class="username">domenzup</a> <div class="usertitle">
				Newbie Poster
								
			</div> <div class="posts-since"><span class="posts">3 posts</span> since Jul 2009</div> <div class="usertip"> <div>Reputation Points: 10</div> <div>Solved Threads: 0</div> </div> </div> <div class="clear">&nbsp;</div> </div> </div> <div class="post"> <form action="http://www.daniweb.com/search/query" method="post" accept-charset="utf-8" id="search" class="user-input"><div style="display:none"> <input name="csrf_token" value="d47dcad9cb76fc44f91b242350259f8c" type="hidden"> </div> <input class="large" name="query" value="chat program 1 server multi client in c" type="text"> <input name="search" value="Search the entire DaniWeb Community" type="submit"> </form> </div> <div class="post"> <div class="postbit-message"> <div class="push-postbit"> <div class="postbit-header"> <div class="left"> <h1 class="bottom-spaced">This article has been dead for over three months: <a href="http://www.daniweb.com/community/contribute/8">Start a new discussion instead</a></h1> <div id="quick-reply"> <form action="http://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers" method="post" accept-charset="utf-8" id="reply-form" class="user-input"><div style="display:none"> <input name="csrf_token" value="d47dcad9cb76fc44f91b242350259f8c" type="hidden"> </div>				Post:
		
<span class="small right">Markdown Syntax: <a href="http://www.daniweb.com/community/syntax" target="_blank">Formatting Help</a></span> <div id="dani66bea4e68666991159f4a3e662dac1ea" class="editor-container"> <div class="wysiwyg"> <a class="bold" title="Ctrl+B">Bold</a> <a class="italic" title="Ctrl+I">Italic</a> <a class="code">Code</a> <a class="inline-code" title="Ctrl+K">Inline Code</a> <a class="link" title="Ctrl+L">Link</a> <a class="quote" title="Ctrl+Q">Quote</a> <a class="heading" title="Ctrl+H">Heading</a> <a class="sub-heading">Sub-Heading</a> <a class="numbered-list" title="Ctrl+O"># List</a> <a class="bulleted-list" title="Ctrl+U">• List</a> <a class="undo">Undo</a> <a class="redo">Redo</a> </div> <textarea style="display: none;" rows="10" cols="80" class="editor" name="message"></textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6.59961px; left: 6.60001px;"><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div style="display: none;" class="CodeMirror-scrollbar"><div class="CodeMirror-scrollbar-inner"></div></div><div draggable="true" class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative"><div style="position: relative; top: 0px;"><div style="display: none;" class="CodeMirror-gutter"><div class="CodeMirror-gutter-text"></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: medium none;"><div style="position: absolute; width: 100%; height: 0px; overflow: hidden; visibility: hidden;"></div><pre style="top: 0px; left: 0px;" class="CodeMirror-cursor">&nbsp;</pre><pre class="CodeMirror-cursor" style="visibility: hidden">&nbsp;</pre><div style="position: relative; z-index: -1; display: none;"></div><div style=""><pre> </pre></div></div></div></div></div></div></div> <div class="show-preview"></div> <div class="clear"></div> </div> <div id="insert-codedani66bea4e68666991159f4a3e662dac1ea" title="Insert Code Snippet into Editor" class="insert-code" data-editor="dani66bea4e68666991159f4a3e662dac1ea"> <textarea rows="30" cols="60" class="editor"></textarea> <a href="#" class="button" accesskey="I">Insert Code Snippet (Alt+I)</a> </div> <script type="text/javascript"> <!--
var myEditordani66bea4e68666991159f4a3e662dac1ea = CodeMirror.fromTextArea($('#dani66bea4e68666991159f4a3e662dac1ea').find('textarea[name="message"]').get(0),
	{
		mode: 'markdown',
		lineWrapping: true,
		tabSize: 4,
		indentUnit: 4,
		matchBrackets: false,
		keyMap: "daniweb"
	}
);
//--> </script> <fieldset id="quick-join" style="display:none"> <legend>Join our community of 981,955 members to contribute</legend> <div class="edit-block"><strong>Username:</strong> <input class="medium" name="username" type="text"></div> <div class="edit-block">Password: <input class="medium" name="password" value="" type="password"></div> <div class="edit-block">Confirm Password: <input class="medium" name="confirm_password" value="" type="password"></div> <div class="clear"></div> <div class="edit-block">&nbsp;</div> <div class="edit-block">Email: <input class="medium" name="email" type="text"></div> <div class="edit-block">Confirm Email: <input class="medium" name="confirm_email" type="text"></div> </fieldset> <div id="reply-captcha"></div> <input name="referer" value="software-development/cpp/threads/6811/winsock-multi-client-servers" type="hidden"> <input name="reply" value="Reply to this Discussion (Alt+S)" accesskey="S" type="submit"> </form> <form action="http://www.daniweb.com/posts/js_upload_attachments" method="post" accept-charset="utf-8" id="attachment-uploader" enctype="multipart/form-data"><div style="display:none"> <input name="csrf_token" value="d47dcad9cb76fc44f91b242350259f8c" type="hidden"> </div></form> </div> <script type="text/javascript"> <!--
$(function() {
	$('iframe[name="attachment-iframe"]').load(inject_attachments);
});
//--> </script> </div> </div> <div class="postbit-body"> <div class="clear"></div> </div> <div class="postbit-below"></div> </div> </div> <div class="post-userinfo"> <div class="big top-spaced">You</div> </div> <div class="clear"></div> </div> </div> </div> <div class="right"> <div class="right small"> <a href="http://www.daniweb.com/software-development/2" rel="up">Software Development</a>
			&gt;					<a href="http://www.daniweb.com/software-development/cpp/8" rel="up">C++</a> </div> </div> <div class="social-widgets"> </div> <div class="social-widgets"> <div><iframe data-twttr-rendered="true" title="Twitter Tweet Button" style="width: 58px; height: 62px;" class="twitter-share-button twitter-count-vertical" src="winsock-multi-client-servers_files/tweet_button.htm" allowtransparency="true" frameborder="0" scrolling="no"></iframe></div> <div><div id="___plusone_1" style="height: 60px; width: 50px; display: inline-block; text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline;"><iframe title="+1" src="winsock-multi-client-servers_files/fastbutton.htm" name="I1_1346941774011" id="I1_1346941774011" vspace="0" tabindex="0" style="position: static; top: 0px; width: 50px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 60px;" marginwidth="0" marginheight="0" hspace="0" allowtransparency="true" frameborder="0" scrolling="no" width="100%"></iframe></div></div> <div><fb:like class=" fb_edge_widget_with_comment fb_iframe_widget" href="http://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers" layout="box_count"><span style="height: 61px; width: 44px;"><iframe src="winsock-multi-client-servers_files/like.htm" class="fb_ltr " title="Like this content on Facebook." style="border: medium none; overflow: hidden; height: 61px; width: 44px;" name="f761d2546565a" id="f3ab6e3f8f1ecc6" scrolling="no"></iframe></span></fb:like></div> <div> <script src="winsock-multi-client-servers_files/in.js" type="text/javascript"></script> <span class="IN-widget" style="line-height: 1; vertical-align: baseline; display: inline-block; text-align: center;"><span style="padding: 0px ! important; margin: 0px ! important; text-indent: 0px ! important; display: inline-block ! important; vertical-align: baseline ! important; font-size: 1px ! important;"><span id="li_ui_li_gen_1346941792342_1-container" class="IN-top IN-empty"><span id="li_ui_li_gen_1346941792342_1" class="IN-top"><span id="li_ui_li_gen_1346941792342_1-inner" class="IN-top"><span id="li_ui_li_gen_1346941792342_1-content" class="IN-top">0</span></span></span></span></span><br><span style="padding: 0px ! important; margin: 0px ! important; text-indent: 0px ! important; display: inline-block ! important; vertical-align: baseline ! important; font-size: 1px ! important;"><span id="li_ui_li_gen_1346941792325_0"><a id="li_ui_li_gen_1346941792325_0-link" href="javascript:void(0);"><span id="li_ui_li_gen_1346941792325_0-logo">in</span><span id="li_ui_li_gen_1346941792325_0-title"><span id="li_ui_li_gen_1346941792325_0-mark"></span><span id="li_ui_li_gen_1346941792325_0-title-text">Share</span></span></a></span></span></span><script type="IN/Share+init" data-url="http://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers" data-counter="top"></script> </div> <div><a href="http://www.daniweb.com/rss/pull/8"><img src="winsock-multi-client-servers_files/feed-icon.png" alt="C++ RSS Feed" border="0" height="32" width="32"></a></div> </div> <div id="tagcloud" class="top-spaced">


	<title>Tag Cloud</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta name="robots" content="noindex">


	
			<a class="tag1" href="http://www.daniweb.com/tags/2d">2d</a>
			<a class="tag1" href="http://www.daniweb.com/tags/algorithm">algorithm</a>
			<a class="tag1" href="http://www.daniweb.com/tags/and">and</a>
			<a class="tag1" href="http://www.daniweb.com/tags/array">array</a>
			<a class="tag1" href="http://www.daniweb.com/tags/arrays">arrays</a>
			<a class="tag1" href="http://www.daniweb.com/tags/beginner">beginner</a>
			<a class="tag1" href="http://www.daniweb.com/tags/binary">binary</a>
			<a class="tag1" href="http://www.daniweb.com/tags/book">book</a>
			<a class="tag1" href="http://www.daniweb.com/tags/borland">borland</a>
			<a class="tag1" href="http://www.daniweb.com/tags/bubble">bubble</a>
			<a class="tag1" href="http://www.daniweb.com/tags/bubblesort">bubblesort</a>
			<a class="tag1" href="http://www.daniweb.com/tags/c">c</a>
			<a class="tag5" href="http://www.daniweb.com/tags/c%2B%2B">c++</a>
			<a class="tag1" href="http://www.daniweb.com/tags/cd">cd</a>
			<a class="tag1" href="http://www.daniweb.com/tags/char">char</a>
			<a class="tag1" href="http://www.daniweb.com/tags/class">class</a>
			<a class="tag1" href="http://www.daniweb.com/tags/classes">classes</a>
			<a class="tag1" href="http://www.daniweb.com/tags/code">code</a>
			<a class="tag1" href="http://www.daniweb.com/tags/collision-detection">collision-detection</a>
			<a class="tag1" href="http://www.daniweb.com/tags/compiler">compiler</a>
			<a class="tag1" href="http://www.daniweb.com/tags/cpp">cpp</a>
			<a class="tag1" href="http://www.daniweb.com/tags/data">data</a>
			<a class="tag1" href="http://www.daniweb.com/tags/database">database</a>
			<a class="tag1" href="http://www.daniweb.com/tags/debug">debug</a>
			<a class="tag1" href="http://www.daniweb.com/tags/delete">delete</a>
			<a class="tag1" href="http://www.daniweb.com/tags/design">design</a>
			<a class="tag1" href="http://www.daniweb.com/tags/destructor">destructor</a>
			<a class="tag1" href="http://www.daniweb.com/tags/dudearoo">dudearoo</a>
			<a class="tag1" href="http://www.daniweb.com/tags/dynamic">dynamic</a>
			<a class="tag1" href="http://www.daniweb.com/tags/error">error</a>
			<a class="tag1" href="http://www.daniweb.com/tags/file">file</a>
			<a class="tag1" href="http://www.daniweb.com/tags/files">files</a>
			<a class="tag1" href="http://www.daniweb.com/tags/friend">friend</a>
			<a class="tag1" href="http://www.daniweb.com/tags/from">from</a>
			<a class="tag1" href="http://www.daniweb.com/tags/fstream">fstream</a>
			<a class="tag1" href="http://www.daniweb.com/tags/function">function</a>
			<a class="tag1" href="http://www.daniweb.com/tags/functions">functions</a>
			<a class="tag1" href="http://www.daniweb.com/tags/game">game</a>
			<a class="tag1" href="http://www.daniweb.com/tags/hash">hash</a>
			<a class="tag1" href="http://www.daniweb.com/tags/header">header</a>
			<a class="tag1" href="http://www.daniweb.com/tags/help">help</a>
			<a class="tag1" href="http://www.daniweb.com/tags/homework">homework</a>
			<a class="tag1" href="http://www.daniweb.com/tags/if">if</a>
			<a class="tag1" href="http://www.daniweb.com/tags/image">image</a>
			<a class="tag1" href="http://www.daniweb.com/tags/inheritance">inheritance</a>
			<a class="tag1" href="http://www.daniweb.com/tags/input">input</a>
			<a class="tag1" href="http://www.daniweb.com/tags/insert">insert</a>
			<a class="tag1" href="http://www.daniweb.com/tags/int">int</a>
			<a class="tag1" href="http://www.daniweb.com/tags/line">line</a>
			<a class="tag1" href="http://www.daniweb.com/tags/linked">linked</a>
			<a class="tag1" href="http://www.daniweb.com/tags/list">list</a>
			<a class="tag1" href="http://www.daniweb.com/tags/loop">loop</a>
			<a class="tag1" href="http://www.daniweb.com/tags/loops">loops</a>
			<a class="tag1" href="http://www.daniweb.com/tags/map">map</a>
			<a class="tag1" href="http://www.daniweb.com/tags/matrix">matrix</a>
			<a class="tag1" href="http://www.daniweb.com/tags/memory">memory</a>
			<a class="tag1" href="http://www.daniweb.com/tags/menu">menu</a>
			<a class="tag1" href="http://www.daniweb.com/tags/not">not</a>
			<a class="tag1" href="http://www.daniweb.com/tags/number">number</a>
			<a class="tag1" href="http://www.daniweb.com/tags/object">object</a>
			<a class="tag1" href="http://www.daniweb.com/tags/objects">objects</a>
			<a class="tag1" href="http://www.daniweb.com/tags/of">of</a>
			<a class="tag1" href="http://www.daniweb.com/tags/oop">oop</a>
			<a class="tag1" href="http://www.daniweb.com/tags/opengl">opengl</a>
			<a class="tag1" href="http://www.daniweb.com/tags/operator">operator</a>
			<a class="tag1" href="http://www.daniweb.com/tags/output">output</a>
			<a class="tag1" href="http://www.daniweb.com/tags/overload">overload</a>
			<a class="tag1" href="http://www.daniweb.com/tags/overloading">overloading</a>
			<a class="tag1" href="http://www.daniweb.com/tags/pointer">pointer</a>
			<a class="tag1" href="http://www.daniweb.com/tags/pointers">pointers</a>
			<a class="tag1" href="http://www.daniweb.com/tags/problem">problem</a>
			<a class="tag1" href="http://www.daniweb.com/tags/program">program</a>
			<a class="tag1" href="http://www.daniweb.com/tags/programming">programming</a>
			<a class="tag1" href="http://www.daniweb.com/tags/project">project</a>
			<a class="tag1" href="http://www.daniweb.com/tags/qt">qt</a>
			<a class="tag1" href="http://www.daniweb.com/tags/question">question</a>
			<a class="tag1" href="http://www.daniweb.com/tags/questions">questions</a>
			<a class="tag1" href="http://www.daniweb.com/tags/read">read</a>
			<a class="tag1" href="http://www.daniweb.com/tags/sdk">sdk</a>
			<a class="tag1" href="http://www.daniweb.com/tags/sdl">sdl</a>
			<a class="tag1" href="http://www.daniweb.com/tags/server">server</a>
			<a class="tag1" href="http://www.daniweb.com/tags/simple">simple</a>
			<a class="tag1" href="http://www.daniweb.com/tags/sort">sort</a>
			<a class="tag1" href="http://www.daniweb.com/tags/sorting">sorting</a>
			<a class="tag1" href="http://www.daniweb.com/tags/stl">stl</a>
			<a class="tag1" href="http://www.daniweb.com/tags/string">string</a>
			<a class="tag1" href="http://www.daniweb.com/tags/strings">strings</a>
			<a class="tag1" href="http://www.daniweb.com/tags/struct">struct</a>
			<a class="tag1" href="http://www.daniweb.com/tags/syntax">syntax</a>
			<a class="tag1" href="http://www.daniweb.com/tags/table">table</a>
			<a class="tag1" href="http://www.daniweb.com/tags/templates">templates</a>
			<a class="tag1" href="http://www.daniweb.com/tags/text">text</a>
			<a class="tag1" href="http://www.daniweb.com/tags/to">to</a>
			<a class="tag1" href="http://www.daniweb.com/tags/tree">tree</a>
			<a class="tag1" href="http://www.daniweb.com/tags/variables">variables</a>
			<a class="tag1" href="http://www.daniweb.com/tags/vc%2B%2B">vc++</a>
			<a class="tag1" href="http://www.daniweb.com/tags/vector">vector</a>
			<a class="tag1" href="http://www.daniweb.com/tags/vectors">vectors</a>
			<a class="tag1" href="http://www.daniweb.com/tags/visual">visual</a>
			<a class="tag1" href="http://www.daniweb.com/tags/windows">windows</a>
		

</div> </div> <script type="text/javascript"> <!--
$(function(){
			$('#tagcloud').load('/community/js_forum_tagcloud/8');	
	});
//--> </script> <script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script> <script type="text/javascript"> <!--
	$('#text-ad').find('a').click(function() {
		_gaq.push(['_trackEvent', 'Text Ad Click', 'Article Page', "C++"]);
		$.post('/advertising/js_refresh_ads/8', { csrf_token: csrf_hash });		
	});
//--> </script> <script type="text/javascript"> <!--
		adsense_div = $('#adsense-middle');	
		google_max_num_ads = '2';
		google_ad_client = 'pub-8426641637123945';
		google_ad_output = 'js';
		google_ad_type = 'text,flash';		google_ad_channel = '0724637888' + adsense_channel;		adsense_width = '728';
		adsense_height = '90';
		google_image_size = '728x90';
		google_feedback = 'on';
		//--> </script> <script language="javascript" type="text/javascript" src="winsock-multi-client-servers_files/show_ads.js"></script><script src="winsock-multi-client-servers_files/show_ads_impl.js"></script><script>google_protectAndRun("ads_core.google_render_ad", google_handleError, google_render_ad);</script><script language="JavaScript1.1" src="winsock-multi-client-servers_files/ads_002"></script> <script type="text/javascript"> <!--
			google_max_num_ads = '2';
			google_ad_client = 'pub-8426641637123945';
			google_ad_output = 'js';
			adsense_width = '728';
			adsense_height = '90';
			google_image_size = '728x90';
			google_feedback = 'on';
							adsense_div = $('#adsense-top');
				google_ad_channel = '4798191823' + adsense_channel;
				google_ad_type = 'text,flash';			
						google_skip = '2';
			//--> </script> <script language="javascript" type="text/javascript" src="winsock-multi-client-servers_files/show_ads.js"></script><script src="winsock-multi-client-servers_files/show_ads_impl.js"></script><script>google_protectAndRun("ads_core.google_render_ad", google_handleError, google_render_ad);</script><script language="JavaScript1.1" src="winsock-multi-client-servers_files/ads_003"></script> <script type="text/javascript"> <!--
		var post_height = $('#postbit-ad').closest('div.push-postbit').height();
		var ad_count = parseInt((post_height - 25) / 100);
		adsense_div = $('#adsense-sidebar');		
		google_ad_client = 'pub-8426641637123945';
		google_ad_output = 'js';
		google_ad_type = 'text,flash';		if (post_height > 650) { adsense_width = '300'; adsense_height = '250'; } else { adsense_width = '300'; adsense_height = '250'; }
		google_image_size = adsense_width + 'x' + adsense_height;
		google_feedback = 'on';
		google_ad_channel = '0225772222' + adsense_channel;
					google_skip = '4';
			if (ad_count > 4) { ad_count = 4; }
				google_max_num_ads = ad_count;
		//--> </script> <script language="javascript" type="text/javascript" src="winsock-multi-client-servers_files/show_ads.js"></script><script src="winsock-multi-client-servers_files/show_ads_impl.js"></script><script>google_protectAndRun("ads_core.google_render_ad", google_handleError, google_render_ad);</script><script language="JavaScript1.1" src="winsock-multi-client-servers_files/ads"></script> <div class="clear top-spaced">&nbsp;</div> <div class="small fixed-width" align="left"> <div class="left"> <div class="bottom-spaced">© 2012 DaniWeb® LLC</div> <div> <a href="http://www.daniweb.com/">Home</a> |
				<a href="http://www.daniweb.com/home/about">About Us</a> |
				<a href="http://www.daniweb.com/home/contact">Contact Us</a> |
				<a href="http://www.daniweb.com/home/press">Press Kit</a> |
				<strong><a href="http://www.daniweb.com/home/advertising">Advertising Opportunities</a></strong> </div> <div> <a href="http://www.daniweb.com/rss/pull"><img src="winsock-multi-client-servers_files/feed-icon-small.png" alt="RSS Feed" style="vertical-align:text-bottom" border="0" height="16" width="16"></a> <a href="http://www.daniweb.com/rss/pull">RSS Feed</a>
				| <a href="http://www.daniweb.com/home/tos">Terms of Service</a>
				| <a href="http://www.daniweb.com/home/donate">Donate</a>
								| <strong><a href="http://www.daniweb.com/events">NYC Events</a></strong> </div> </div> <div class="right social-widgets"><div><fb:like class=" fb_edge_widget_with_comment fb_iframe_widget" href="http://www.daniweb.com/" send="false" show_faces="true"><span style="height: 28px; width: 450px;"><iframe src="winsock-multi-client-servers_files/like_002.htm" class="fb_ltr " title="Like this content on Facebook." style="border: medium none; overflow: hidden; height: 28px; width: 450px;" name="f78f57be001a1a" id="f2f322cbc6498dc" scrolling="no"></iframe></span></fb:like></div></div> <div class="clear">&nbsp;</div> </div> </div> <!-- Facebook --> <div class=" fb_reset" id="fb-root"><script src="winsock-multi-client-servers_files/all.js" async=""></script><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe src="winsock-multi-client-servers_files/xd_arbiter.htm" name="fb_xdm_frame_http" id="fb_xdm_frame_http"></iframe><iframe src="winsock-multi-client-servers_files/xd_arbiter_002.htm" name="fb_xdm_frame_https" id="fb_xdm_frame_https"></iframe></div><div></div></div></div> <script type="text/javascript">
  window.fbAsyncInit = function() {
    FB.init({channelURL: 'http://www.daniweb.com/js/fb_channel.html',
             status: true, cookie: true, xfbml: true});
	FB.Event.subscribe('edge.create', function(response) {
				_gaq.push(['_trackSocial', 'Facebook', 'Like', response]);
	});
  };
  (function() {
    var e = document.createElement('script'); e.async = true;
    e.src = document.location.protocol +
      '//connect.facebook.net/en_US/all.js';
    document.getElementById('fb-root').appendChild(e);
  }());
</script> <!-- / Facebook --> <script type="text/javascript" charset="utf-8">
  window.twttr = (function (d,s,id) {
    var t, js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return; js=d.createElement(s); js.id=id;
    js.src="//platform.twitter.com/widgets.js"; fjs.parentNode.insertBefore(js, fjs);
    return window.twttr || (t = { _e: [], ready: function(f){ t._e.push(f) } });
  }(document, "script", "twitter-wjs"));

 // Wait for the asynchronous resources to load
 twttr.ready(function (twttr) {
  // Now bind our custom intent events
  twttr.events.bind('tweet', function(intent_event) {
    if (intent_event) {
				_gaq.push(['_trackSocial', 'Twitter', 'Tweet']);
    }
  });
 });
</script> <!-- begin zdbb --><script type="text/javascript" src="winsock-multi-client-servers_files/tuqzsEtsEeGk4RIxOSbhOA.js"></script><!-- end zdbb --> <!-- Start Quantcast tag --> <!-- Quantcast Tag, part 1 --> <script type="text/javascript">
	  var _qevents = _qevents || [];
	
	  (function() {
	   var elem = document.createElement('script');
	
	   elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";
	   elem.async = true;
	   elem.type = "text/javascript";
	   var scpt = document.getElementsByTagName('script')[0];
	   scpt.parentNode.insertBefore(elem, scpt);  
	  })();
	</script> <!-- Quantcast Tag, part 2 --> <script type="text/javascript">
	_qevents.push( { qacct:"p-bbaiiIkNAS7WU"} );
	</script> <noscript> <div style="display: none;"><img src="http://pixel.quantserve.com/pixel/p-bbaiiIkNAS7WU.gif" height="1" width="1" alt="Quantcast"/></div> </noscript> <!-- End Quantcast tag --> <!-- Begin comScore Tag --><script type="text/javascript">var _comscore = _comscore || [];_comscore.push({ c1: "2", c2: "8206247" });(function() {var s = document.createElement("script"), el = document.getElementsByTagName("script")[0]; s.async = true;s.src = (document.location.protocol == "https:" ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js";el.parentNode.insertBefore(s, el);})();</script><noscript><img src="http://b.scorecardresearch.com/p?c1=2&amp;c2=8206247&amp;cv=2.0&amp;cj=1" alt="" /></noscript><!-- End comScore Tag --> <div id="toolbar" align="center"> <div class="fixed-width"> <ul class="toolbar"> <li><a href="http://www.daniweb.com/articles/latest">Recently Updated Articles</a></li> <li><a href="http://www.daniweb.com/members/join">Join the DaniWeb Community</a></li> <li><span class="label">Ad:</span> <div class="ib-unit"> <div class="ib-title"><a href="http://links.industrybrains.com/click?sid=741&amp;rqctid=5420&amp;pos=1&amp;lid=722601&amp;cid=150897&amp;pr=2&amp;tstamp=20120906102827&amp;ltype=NA&amp;lname=&amp;url=http://hs.maas360.com/main-site-theme-3/%3fid%3d339%26K%3d%7bkeyword%7d%26A%3dmarchex%26O%3dHS%26utm_source%3dmarchex%26utm_medium%3dcpc%26utm_campaign%3dmx" rel="nofollow" target="_blank">iPhone Enterprise Management Guide</a></div> </div> </li> </ul> </div> </div> <script type="text/javascript"> <!--
		$('#toolbar').find('div.ib-unit a').click(function() {
		_gaq.push(['_trackEvent', 'Text Ad Click', 'Footer Toolbar', "C++"]);
		$.post('/advertising/js_refresh_ads/8', { csrf_token: csrf_hash });		
	});
	//--> </script> <!-- Google Code for Visit Software Development Category Remarketing List --> <script type="text/javascript">
	/* <![CDATA[ */
	var google_conversion_id = 1068326786;
	var google_conversion_language = "en";
	var google_conversion_format = "3";
	var google_conversion_color = "FFFFFF";
	var google_conversion_label = "a_gpCJa6gAIQgr-1_QM";
	var google_conversion_value = 0;
	/* ]]> */
	</script> <script type="text/javascript" src="winsock-multi-client-servers_files/conversion.js"> </script><img src="winsock-multi-client-servers_files/a.gif" border="0" height="1" width="1"> <noscript> <div style="display:inline;"> <img height="1" width="1" style="border-style:none;" alt="" src="http://www.googleadservices.com/pagead/conversion/1068326786/?label=a_gpCJa6gAIQgr-1_QM&amp;guid=ON&amp;script=0"/> </div> </noscript>  
<div aria-labelledby="ui-dialog-title-about-modal" role="dialog" tabindex="-1" class="ui-dialog ui-widget ui-widget-content ui-corner-all" style="display: none; z-index: 1002; outline: 0px none; height: auto; width: 500px; top: 166px; left: 421.5px;"><div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix"><span id="ui-dialog-title-about-modal" class="ui-dialog-title">About DaniWeb</span><a role="button" class="ui-dialog-titlebar-close ui-corner-all" href="#"><span class="ui-icon ui-icon-closethick">close</span></a></div><div scrollleft="0" scrolltop="0" class="ui-dialog-content ui-widget-content" style="display: block; width: auto; min-height: 0px; height: auto;" id="about-modal"> <div class="left" style="width:240px"> <div class="border oauth" style="margin-top:0px"> <div class="bottom-spaced"><a class="big" href="https://www.facebook.com/dialog/oauth/?client_id=135220243179040&amp;redirect_uri=http%3A%2F%2Fwww.daniweb.com%2Fmembers%2Fauthorize%2Ffacebook&amp;state=d47dcad9cb76fc44f91b242350259f8c&amp;scope=email,user_birthday" rel="nofollow">Log In with Facebook</a></div> </div> <div class="oauth-or"><div class="inner" style="left:95px">or</div></div> <div class="border oauth"> <div class="top-spaced bottom-spaced"> <form action="http://www.daniweb.com/members/login" method="post" accept-charset="utf-8"><div style="display:none"> <input name="csrf_token" value="d47dcad9cb76fc44f91b242350259f8c" type="hidden"> </div> <div>Username: <input name="username" type="text"></div> <div>Password: <input name="password" type="password"></div> <input value="Log In" type="submit"> <a href="http://www.daniweb.com/members/lost_password">Lost login information?</a> <input name="referer" value="software-development/cpp/threads/6811/winsock-multi-client-servers" type="hidden"> </form> </div> </div> <div class="oauth-or"><div class="inner" style="left:95px">or</div></div> <div class="border oauth"> <div class="top-spaced"><a class="big" href="http://www.daniweb.com/members/join">Join DaniWeb</a></div> </div> </div> <div class="right" style="width:230px"> <div class="bottom-spaced social-widgets"> <div><iframe data-twttr-rendered="true" title="Twitter Tweet Button" style="width: 58px; height: 62px;" class="twitter-share-button twitter-count-vertical" src="winsock-multi-client-servers_files/tweet_button_002.htm" allowtransparency="true" frameborder="0" scrolling="no"></iframe></div> <div><div id="___plusone_0" style="height: 60px; width: 50px; display: inline-block; text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline;"><iframe title="+1" src="winsock-multi-client-servers_files/fastbutton_002.htm" name="I0_1346941773997" id="I0_1346941773997" vspace="0" tabindex="0" style="position: static; top: 0px; width: 50px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 60px;" marginwidth="0" marginheight="0" hspace="0" allowtransparency="true" frameborder="0" scrolling="no" width="100%"></iframe></div></div> <div><fb:like class=" fb_edge_widget_with_comment fb_iframe_widget" href="http://www.daniweb.com/software-development/cpp/threads/6811/winsock-multi-client-servers" layout="box_count"><span style="height: 61px; width: 44px;"><iframe src="winsock-multi-client-servers_files/like_003.htm" class="fb_ltr " title="Like this content on Facebook." style="border: medium none; overflow: hidden; height: 61px; width: 44px;" name="f16e0410a0d21b6" id="fec2c4bc078ec2" scrolling="no"></iframe></span></fb:like></div> </div> <div class="description">We're a community of 982K IT Pros here for help, advice, solutions, professional growth and fun. Join us!</div> <div class="description"> <a id="close-modal" href="#">Close This and Continue …</a> <div><span class="black"><em>(Sorry we interrupted you!)</em></span></div> </div> </div> <div class="clear"></div> <div><fb:like class=" fb_edge_widget_with_comment fb_iframe_widget" href="http://www.daniweb.com/" send="false" width="470" true"=""><span style="height: 28px; width: 470px;"><iframe src="winsock-multi-client-servers_files/like_004.htm" class="fb_ltr " title="Like this content on Facebook." style="border: medium none; overflow: hidden; height: 28px; width: 470px;" name="f2762bb110389e4" id="f1e5d48b6d1c3d" scrolling="no"></iframe></span></fb:like></div> </div></div><div class="tooltip" id="tooltip0"><img src="winsock-multi-client-servers_files/image_002.jpg"></div><div class="tooltip" id="tooltip1"><img src="winsock-multi-client-servers_files/image_003.jpg"></div><div class="tooltip" id="tooltip2"><img src="winsock-multi-client-servers_files/image.jpg"></div><div class="tooltip" id="tooltip3"><img src="winsock-multi-client-servers_files/image.jpg"></div><div class="adtip" id="ad-tooltip0">Best Practices Guide For Supporting iPhones &amp; iPads In An Enterprise.</div></body></html>